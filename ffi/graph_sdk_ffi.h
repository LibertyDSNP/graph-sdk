/*
 Copyright (C) 2023 Frequency Team /


#ifndef GRAPH_SDK_FFI_H_
#define GRAPH_SDK_FFI_H_

/* This file was automatically generated by cbindgen */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum {
  Connect,
  Disconnect,
} ActionType;

typedef enum {
  Version1_0,
} DsnpVersion;

typedef enum {
  Mainnet,
  Rococo,
  Dev,
} EnvironmentType;

/**
 * KeyType wrapper
 */
typedef enum {
  /**
   * Ed25519 key type
   */
  X25519 = 0,
} GraphKeyType;

typedef enum {
  Public,
  Private,
} PrivacyType;

typedef struct Config Config;

typedef struct GraphState GraphState;

typedef struct {
  EnvironmentType environment_type;
  Config config;
} Environment;

typedef enum {
  Follow,
  Friendship,
} ConnectionType_Tag;

typedef struct {
  ConnectionType_Tag tag;
  union {
    struct {
      PrivacyType follow;
    };
    struct {
      PrivacyType friendship;
    };
  };
} ConnectionType;

typedef struct {
  DsnpVersion dsnp_version;
  ConnectionType connection_type;
} SchemaConfig;

/**
 * Key Pair wrapper
 */
typedef struct {
  /**
   * key pair type
   */
  GraphKeyType key_type;
  /**
   * public key raw
   */
  const uint8_t *public_key;
  /**
   * length of the public key
   */
  size_t public_key_len;
  /**
   * secret key raw
   */
  const uint8_t *secret_key;
  /**
   * length of the secret key
   */
  size_t secret_key_len;
} GraphKeyPair;

/**
 * KeyData wrapper
 */
typedef struct {
  uint16_t index;
  uint8_t *content;
} KeyData;

typedef struct {
  uint64_t dsnp_user_id;
  uint64_t keys_hash;
  KeyData *keys;
  size_t keys_len;
} DsnpKeys;

typedef struct {
  uint16_t page_id;
  uint8_t *content;
  size_t content_len;
  uint64_t content_hash;
} PageData;

typedef struct {
  /**
   * graph owner dsnp user id
   */
  uint64_t dsnp_user_id;
  /**
   * Schema id of imported data
   */
  uint16_t schema_id;
  /**
   * key pairs associated with this graph which is used for encryption and PRI generation
   */
  GraphKeyPair *key_pairs;
  size_t key_pairs_len;
  /**
   * published dsnp keys associated with this dsnp user
   */
  DsnpKeys *dsnp_keys;
  /**
   * Page data containing the social graph retrieved from chain
   */
  PageData *pages;
  size_t pages_len;
} ImportBundle;

typedef struct {
  /**
   * owner of the social graph
   */
  uint64_t owner_dsnp_user_id;
  /**
   * Schema id of imported data
   */
  uint16_t schema_id;
  /**
   * page id associated with changed page
   */
  uint16_t page_id;
  /**
   * previous hash value is used to avoid updating a stale state
   */
  uint32_t prev_hash;
  /**
   * social graph page data
   */
  uint8_t *payload;
  size_t payload_len;
} PersistPage;

typedef struct {
  /**
   * owner of the social graph
   */
  uint64_t owner_dsnp_user_id;
  /**
   * Schema id of removed data
   */
  uint16_t schema_id;
  /**
   * page id associated with changed page
   */
  uint16_t page_id;
  /**
   * previous hash value is used to avoid updating a stale state
   */
  uint32_t prev_hash;
} DeletePage;

typedef struct {
  /**
   * owner of the social graph
   */
  uint64_t owner_dsnp_user_id;
  /**
   * previous hash value is used to avoid updating a stale state
   */
  uint32_t prev_hash;
  /**
   * social graph page data
   */
  uint8_t *payload;
  size_t payload_len;
} AddKey;

typedef enum {
  PersistPage,
  DeletePage,
  AddKey,
} Update_Tag;

typedef struct {
  Update_Tag tag;
  union {
    struct {
      PersistPage persist_page;
    };
    struct {
      DeletePage delete_page;
    };
    struct {
      AddKey add_key;
    };
  };
} Update;

typedef struct {
  ActionType action_type;
  void *action;
} Action;

typedef struct {
  uint64_t user_id;
  uint64_t since;
} DsnpGraphEdge;

GraphState *graph_state_new(const Environment *environment);

void graph_state_free(GraphState *graph_state);

#endif /* GRAPH_SDK_FFI_H_ */
