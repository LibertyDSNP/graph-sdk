name: Verify PR Commit
concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true
on:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
  verify:
    name: Check PR Commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: wasm32-unknown-unknown
      
      - name: Cargo check
        run: make check
      
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: wasm32-unknown-unknown
      
      - name: Cargo test
        run: make test

  lint:
    name: Run linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: wasm32-unknown-unknown
      
      - name: Cargo fmt
        run: make fmt

#  clippy:
#    name: Run clippy
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Install Rust Toolchain
#        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
#        with:
#          toolchain: stable
#          default: true
#          profile: minimal
#          target: wasm32-unknown-unknown
#
#      - name: Cargo clippy
#        run: make clippy

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: wasm32-unknown-unknown

      - name: Cargo build
        run: make build
  test_binary:
    name: Generate bindgen and run c_example
    runs-on: ubuntu-latest
    needs: [verify, test, lint, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: wasm32-unknown-unknown
      - name: Generate bindgen
        run: make bindgen
      - name: Copy library to c_example
        run: cp target/release/libgraph_sdk_ffi.so bridge/ffi/src/c_example/
      - name: Build main binary
        run: cd bridge/ffi/src/c_example/ && gcc main.c -L. -lgraph_sdk_ffi -o main
      - name: Run main binary
        id: run-main
        run: |
          export LD_LIBRARY_PATH=bridge/ffi/src/c_example/
          output=$(./bridge/ffi/src/c_example/main)
          echo "$output"
          echo "::set-output name=output::$output"
      - name: Check test result
        run: |
          if [[ "${{ steps.run-main.outputs.output }}" == *"passed"* ]]; then
            echo "All tests passed!"
          else
            echo "Some tests failed!"
            exit 1
          fi
      - name: Upload artifacts graph_sdk_ffi.h and libgraph_sdk_ffi.so
        uses: actions/upload-artifact@v2
        with:
          name: graph_sdk_ffi
          path: |
            bridge/ffi/src/c_example/graph_sdk_ffi.h
            bridge/ffi/src/c_example/libgraph_sdk_ffi.so
            bridge/ffi/src/c_example/main.c

  generate-docs:
    name: Generate graph sdk rust docs
    runs-on: ubuntu-latest
    needs: [verify, test, lint, build, test_binary]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: wasm32-unknown-unknown

      - name: Build Rust Docs
        run: RUSTDOCFLAGS="--enable-index-page --check -Zunstable-options" cargo doc --no-deps --all-features
