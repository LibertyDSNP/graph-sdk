// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bridge/common/protos/output.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:SchemaConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SchemaConfig {
    // message fields
    // @@protoc_insertion_point(field:SchemaConfig.dsnp_version)
    pub dsnp_version: ::protobuf::EnumOrUnknown<DsnpVersion>,
    // @@protoc_insertion_point(field:SchemaConfig.connection_type)
    pub connection_type: ::protobuf::EnumOrUnknown<ConnectionType>,
    // special fields
    // @@protoc_insertion_point(special_field:SchemaConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SchemaConfig {
    fn default() -> &'a SchemaConfig {
        <SchemaConfig as ::protobuf::Message>::default_instance()
    }
}

impl SchemaConfig {
    pub fn new() -> SchemaConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dsnp_version",
            |m: &SchemaConfig| { &m.dsnp_version },
            |m: &mut SchemaConfig| { &mut m.dsnp_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_type",
            |m: &SchemaConfig| { &m.connection_type },
            |m: &mut SchemaConfig| { &mut m.connection_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SchemaConfig>(
            "SchemaConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SchemaConfig {
    const NAME: &'static str = "SchemaConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.dsnp_version = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.connection_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.dsnp_version != ::protobuf::EnumOrUnknown::new(DsnpVersion::Version1_0) {
            my_size += ::protobuf::rt::int32_size(1, self.dsnp_version.value());
        }
        if self.connection_type != ::protobuf::EnumOrUnknown::new(ConnectionType::FollowPublic) {
            my_size += ::protobuf::rt::int32_size(2, self.connection_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.dsnp_version != ::protobuf::EnumOrUnknown::new(DsnpVersion::Version1_0) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.dsnp_version))?;
        }
        if self.connection_type != ::protobuf::EnumOrUnknown::new(ConnectionType::FollowPublic) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.connection_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SchemaConfig {
        SchemaConfig::new()
    }

    fn clear(&mut self) {
        self.dsnp_version = ::protobuf::EnumOrUnknown::new(DsnpVersion::Version1_0);
        self.connection_type = ::protobuf::EnumOrUnknown::new(ConnectionType::FollowPublic);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SchemaConfig {
        static instance: SchemaConfig = SchemaConfig {
            dsnp_version: ::protobuf::EnumOrUnknown::from_i32(0),
            connection_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SchemaConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SchemaConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SchemaConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchemaConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Config)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Config {
    // message fields
    // @@protoc_insertion_point(field:Config.sdk_max_stale_friendship_days)
    pub sdk_max_stale_friendship_days: u32,
    // @@protoc_insertion_point(field:Config.max_graph_page_size_bytes)
    pub max_graph_page_size_bytes: u32,
    // @@protoc_insertion_point(field:Config.max_page_id)
    pub max_page_id: u32,
    // @@protoc_insertion_point(field:Config.max_key_page_size_bytes)
    pub max_key_page_size_bytes: u32,
    // @@protoc_insertion_point(field:Config.schema_map)
    pub schema_map: ::std::collections::HashMap<u32, SchemaConfig>,
    // @@protoc_insertion_point(field:Config.dsnp_versions)
    pub dsnp_versions: ::std::vec::Vec<::protobuf::EnumOrUnknown<DsnpVersion>>,
    // @@protoc_insertion_point(field:Config.graph_public_key_schema_id)
    pub graph_public_key_schema_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Config.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Config {
    fn default() -> &'a Config {
        <Config as ::protobuf::Message>::default_instance()
    }
}

impl Config {
    pub fn new() -> Config {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sdk_max_stale_friendship_days",
            |m: &Config| { &m.sdk_max_stale_friendship_days },
            |m: &mut Config| { &mut m.sdk_max_stale_friendship_days },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_graph_page_size_bytes",
            |m: &Config| { &m.max_graph_page_size_bytes },
            |m: &mut Config| { &mut m.max_graph_page_size_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_page_id",
            |m: &Config| { &m.max_page_id },
            |m: &mut Config| { &mut m.max_page_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_key_page_size_bytes",
            |m: &Config| { &m.max_key_page_size_bytes },
            |m: &mut Config| { &mut m.max_key_page_size_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "schema_map",
            |m: &Config| { &m.schema_map },
            |m: &mut Config| { &mut m.schema_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dsnp_versions",
            |m: &Config| { &m.dsnp_versions },
            |m: &mut Config| { &mut m.dsnp_versions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "graph_public_key_schema_id",
            |m: &Config| { &m.graph_public_key_schema_id },
            |m: &mut Config| { &mut m.graph_public_key_schema_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Config>(
            "Config",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Config {
    const NAME: &'static str = "Config";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sdk_max_stale_friendship_days = is.read_uint32()?;
                },
                16 => {
                    self.max_graph_page_size_bytes = is.read_uint32()?;
                },
                24 => {
                    self.max_page_id = is.read_uint32()?;
                },
                32 => {
                    self.max_key_page_size_bytes = is.read_uint32()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.schema_map.insert(key, value);
                },
                48 => {
                    self.dsnp_versions.push(is.read_enum_or_unknown()?);
                },
                50 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.dsnp_versions)?
                },
                56 => {
                    self.graph_public_key_schema_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sdk_max_stale_friendship_days != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.sdk_max_stale_friendship_days);
        }
        if self.max_graph_page_size_bytes != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.max_graph_page_size_bytes);
        }
        if self.max_page_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.max_page_id);
        }
        if self.max_key_page_size_bytes != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.max_key_page_size_bytes);
        }
        for (k, v) in &self.schema_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::vec_packed_enum_or_unknown_size(6, &self.dsnp_versions);
        if self.graph_public_key_schema_id != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.graph_public_key_schema_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sdk_max_stale_friendship_days != 0 {
            os.write_uint32(1, self.sdk_max_stale_friendship_days)?;
        }
        if self.max_graph_page_size_bytes != 0 {
            os.write_uint32(2, self.max_graph_page_size_bytes)?;
        }
        if self.max_page_id != 0 {
            os.write_uint32(3, self.max_page_id)?;
        }
        if self.max_key_page_size_bytes != 0 {
            os.write_uint32(4, self.max_key_page_size_bytes)?;
        }
        for (k, v) in &self.schema_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_repeated_packed_enum_or_unknown(6, &self.dsnp_versions)?;
        if self.graph_public_key_schema_id != 0 {
            os.write_uint32(7, self.graph_public_key_schema_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Config {
        Config::new()
    }

    fn clear(&mut self) {
        self.sdk_max_stale_friendship_days = 0;
        self.max_graph_page_size_bytes = 0;
        self.max_page_id = 0;
        self.max_key_page_size_bytes = 0;
        self.schema_map.clear();
        self.dsnp_versions.clear();
        self.graph_public_key_schema_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Config {
        static instance: ::protobuf::rt::Lazy<Config> = ::protobuf::rt::Lazy::new();
        instance.get(Config::new)
    }
}

impl ::protobuf::MessageFull for Config {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Config").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Config {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Config {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Environment)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Environment {
    // message fields
    // @@protoc_insertion_point(field:Environment.environment_type)
    pub environment_type: ::protobuf::EnumOrUnknown<EnvironmentType>,
    // @@protoc_insertion_point(field:Environment.config)
    pub config: ::protobuf::MessageField<Config>,
    // special fields
    // @@protoc_insertion_point(special_field:Environment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Environment {
    fn default() -> &'a Environment {
        <Environment as ::protobuf::Message>::default_instance()
    }
}

impl Environment {
    pub fn new() -> Environment {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "environment_type",
            |m: &Environment| { &m.environment_type },
            |m: &mut Environment| { &mut m.environment_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Config>(
            "config",
            |m: &Environment| { &m.config },
            |m: &mut Environment| { &mut m.config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Environment>(
            "Environment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Environment {
    const NAME: &'static str = "Environment";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.environment_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.environment_type != ::protobuf::EnumOrUnknown::new(EnvironmentType::MainNet) {
            my_size += ::protobuf::rt::int32_size(1, self.environment_type.value());
        }
        if let Some(v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.environment_type != ::protobuf::EnumOrUnknown::new(EnvironmentType::MainNet) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.environment_type))?;
        }
        if let Some(v) = self.config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Environment {
        Environment::new()
    }

    fn clear(&mut self) {
        self.environment_type = ::protobuf::EnumOrUnknown::new(EnvironmentType::MainNet);
        self.config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Environment {
        static instance: Environment = Environment {
            environment_type: ::protobuf::EnumOrUnknown::from_i32(0),
            config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Environment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Environment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Environment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Environment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Updates)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Updates {
    // message fields
    // @@protoc_insertion_point(field:Updates.update)
    pub update: ::std::vec::Vec<updates::Update>,
    // special fields
    // @@protoc_insertion_point(special_field:Updates.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Updates {
    fn default() -> &'a Updates {
        <Updates as ::protobuf::Message>::default_instance()
    }
}

impl Updates {
    pub fn new() -> Updates {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "update",
            |m: &Updates| { &m.update },
            |m: &mut Updates| { &mut m.update },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Updates>(
            "Updates",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Updates {
    const NAME: &'static str = "Updates";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.update.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.update {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.update {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Updates {
        Updates::new()
    }

    fn clear(&mut self) {
        self.update.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Updates {
        static instance: Updates = Updates {
            update: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Updates {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Updates").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Updates {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Updates {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Updates`
pub mod updates {
    // @@protoc_insertion_point(message:Updates.Update)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Update {
        // message oneof groups
        pub inner: ::std::option::Option<update::Inner>,
        // special fields
        // @@protoc_insertion_point(special_field:Updates.Update.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Update {
        fn default() -> &'a Update {
            <Update as ::protobuf::Message>::default_instance()
        }
    }

    impl Update {
        pub fn new() -> Update {
            ::std::default::Default::default()
        }

        // .Updates.Update.PersistPageUpdate persist = 1;

        pub fn persist(&self) -> &update::PersistPageUpdate {
            match self.inner {
                ::std::option::Option::Some(update::Inner::Persist(ref v)) => v,
                _ => <update::PersistPageUpdate as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_persist(&mut self) {
            self.inner = ::std::option::Option::None;
        }

        pub fn has_persist(&self) -> bool {
            match self.inner {
                ::std::option::Option::Some(update::Inner::Persist(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_persist(&mut self, v: update::PersistPageUpdate) {
            self.inner = ::std::option::Option::Some(update::Inner::Persist(v))
        }

        // Mutable pointer to the field.
        pub fn mut_persist(&mut self) -> &mut update::PersistPageUpdate {
            if let ::std::option::Option::Some(update::Inner::Persist(_)) = self.inner {
            } else {
                self.inner = ::std::option::Option::Some(update::Inner::Persist(update::PersistPageUpdate::new()));
            }
            match self.inner {
                ::std::option::Option::Some(update::Inner::Persist(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_persist(&mut self) -> update::PersistPageUpdate {
            if self.has_persist() {
                match self.inner.take() {
                    ::std::option::Option::Some(update::Inner::Persist(v)) => v,
                    _ => panic!(),
                }
            } else {
                update::PersistPageUpdate::new()
            }
        }

        // .Updates.Update.DeletePageUpdate delete = 2;

        pub fn delete(&self) -> &update::DeletePageUpdate {
            match self.inner {
                ::std::option::Option::Some(update::Inner::Delete(ref v)) => v,
                _ => <update::DeletePageUpdate as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_delete(&mut self) {
            self.inner = ::std::option::Option::None;
        }

        pub fn has_delete(&self) -> bool {
            match self.inner {
                ::std::option::Option::Some(update::Inner::Delete(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_delete(&mut self, v: update::DeletePageUpdate) {
            self.inner = ::std::option::Option::Some(update::Inner::Delete(v))
        }

        // Mutable pointer to the field.
        pub fn mut_delete(&mut self) -> &mut update::DeletePageUpdate {
            if let ::std::option::Option::Some(update::Inner::Delete(_)) = self.inner {
            } else {
                self.inner = ::std::option::Option::Some(update::Inner::Delete(update::DeletePageUpdate::new()));
            }
            match self.inner {
                ::std::option::Option::Some(update::Inner::Delete(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_delete(&mut self) -> update::DeletePageUpdate {
            if self.has_delete() {
                match self.inner.take() {
                    ::std::option::Option::Some(update::Inner::Delete(v)) => v,
                    _ => panic!(),
                }
            } else {
                update::DeletePageUpdate::new()
            }
        }

        // .Updates.Update.AddKeyUpdate add_key = 3;

        pub fn add_key(&self) -> &update::AddKeyUpdate {
            match self.inner {
                ::std::option::Option::Some(update::Inner::AddKey(ref v)) => v,
                _ => <update::AddKeyUpdate as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_add_key(&mut self) {
            self.inner = ::std::option::Option::None;
        }

        pub fn has_add_key(&self) -> bool {
            match self.inner {
                ::std::option::Option::Some(update::Inner::AddKey(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_add_key(&mut self, v: update::AddKeyUpdate) {
            self.inner = ::std::option::Option::Some(update::Inner::AddKey(v))
        }

        // Mutable pointer to the field.
        pub fn mut_add_key(&mut self) -> &mut update::AddKeyUpdate {
            if let ::std::option::Option::Some(update::Inner::AddKey(_)) = self.inner {
            } else {
                self.inner = ::std::option::Option::Some(update::Inner::AddKey(update::AddKeyUpdate::new()));
            }
            match self.inner {
                ::std::option::Option::Some(update::Inner::AddKey(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_add_key(&mut self) -> update::AddKeyUpdate {
            if self.has_add_key() {
                match self.inner.take() {
                    ::std::option::Option::Some(update::Inner::AddKey(v)) => v,
                    _ => panic!(),
                }
            } else {
                update::AddKeyUpdate::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, update::PersistPageUpdate>(
                "persist",
                Update::has_persist,
                Update::persist,
                Update::mut_persist,
                Update::set_persist,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, update::DeletePageUpdate>(
                "delete",
                Update::has_delete,
                Update::delete,
                Update::mut_delete,
                Update::set_delete,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, update::AddKeyUpdate>(
                "add_key",
                Update::has_add_key,
                Update::add_key,
                Update::mut_add_key,
                Update::set_add_key,
            ));
            oneofs.push(update::Inner::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Update>(
                "Updates.Update",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Update {
        const NAME: &'static str = "Update";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.inner = ::std::option::Option::Some(update::Inner::Persist(is.read_message()?));
                    },
                    18 => {
                        self.inner = ::std::option::Option::Some(update::Inner::Delete(is.read_message()?));
                    },
                    26 => {
                        self.inner = ::std::option::Option::Some(update::Inner::AddKey(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.inner {
                match v {
                    &update::Inner::Persist(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &update::Inner::Delete(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &update::Inner::AddKey(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.inner {
                match v {
                    &update::Inner::Persist(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &update::Inner::Delete(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &update::Inner::AddKey(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Update {
            Update::new()
        }

        fn clear(&mut self) {
            self.inner = ::std::option::Option::None;
            self.inner = ::std::option::Option::None;
            self.inner = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Update {
            static instance: Update = Update {
                inner: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Update {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Updates.Update").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Update {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Update {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Update`
    pub mod update {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:Updates.Update.inner)
        pub enum Inner {
            // @@protoc_insertion_point(oneof_field:Updates.Update.persist)
            Persist(PersistPageUpdate),
            // @@protoc_insertion_point(oneof_field:Updates.Update.delete)
            Delete(DeletePageUpdate),
            // @@protoc_insertion_point(oneof_field:Updates.Update.add_key)
            AddKey(AddKeyUpdate),
        }

        impl ::protobuf::Oneof for Inner {
        }

        impl ::protobuf::OneofFull for Inner {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Update as ::protobuf::MessageFull>::descriptor().oneof_by_name("inner").unwrap()).clone()
            }
        }

        impl Inner {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Inner>("inner")
            }
        }
        // @@protoc_insertion_point(message:Updates.Update.PersistPageUpdate)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct PersistPageUpdate {
            // message fields
            // @@protoc_insertion_point(field:Updates.Update.PersistPageUpdate.owner_dsnp_user_id)
            pub owner_dsnp_user_id: u64,
            // @@protoc_insertion_point(field:Updates.Update.PersistPageUpdate.schema_id)
            pub schema_id: u32,
            // @@protoc_insertion_point(field:Updates.Update.PersistPageUpdate.page_id)
            pub page_id: u32,
            // @@protoc_insertion_point(field:Updates.Update.PersistPageUpdate.prev_hash)
            pub prev_hash: u32,
            // @@protoc_insertion_point(field:Updates.Update.PersistPageUpdate.payload)
            pub payload: ::std::vec::Vec<u8>,
            // special fields
            // @@protoc_insertion_point(special_field:Updates.Update.PersistPageUpdate.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a PersistPageUpdate {
            fn default() -> &'a PersistPageUpdate {
                <PersistPageUpdate as ::protobuf::Message>::default_instance()
            }
        }

        impl PersistPageUpdate {
            pub fn new() -> PersistPageUpdate {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(5);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "owner_dsnp_user_id",
                    |m: &PersistPageUpdate| { &m.owner_dsnp_user_id },
                    |m: &mut PersistPageUpdate| { &mut m.owner_dsnp_user_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "schema_id",
                    |m: &PersistPageUpdate| { &m.schema_id },
                    |m: &mut PersistPageUpdate| { &mut m.schema_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "page_id",
                    |m: &PersistPageUpdate| { &m.page_id },
                    |m: &mut PersistPageUpdate| { &mut m.page_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "prev_hash",
                    |m: &PersistPageUpdate| { &m.prev_hash },
                    |m: &mut PersistPageUpdate| { &mut m.prev_hash },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "payload",
                    |m: &PersistPageUpdate| { &m.payload },
                    |m: &mut PersistPageUpdate| { &mut m.payload },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PersistPageUpdate>(
                    "Updates.Update.PersistPageUpdate",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for PersistPageUpdate {
            const NAME: &'static str = "PersistPageUpdate";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.owner_dsnp_user_id = is.read_uint64()?;
                        },
                        16 => {
                            self.schema_id = is.read_uint32()?;
                        },
                        24 => {
                            self.page_id = is.read_uint32()?;
                        },
                        32 => {
                            self.prev_hash = is.read_uint32()?;
                        },
                        42 => {
                            self.payload = is.read_bytes()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.owner_dsnp_user_id != 0 {
                    my_size += ::protobuf::rt::uint64_size(1, self.owner_dsnp_user_id);
                }
                if self.schema_id != 0 {
                    my_size += ::protobuf::rt::uint32_size(2, self.schema_id);
                }
                if self.page_id != 0 {
                    my_size += ::protobuf::rt::uint32_size(3, self.page_id);
                }
                if self.prev_hash != 0 {
                    my_size += ::protobuf::rt::uint32_size(4, self.prev_hash);
                }
                if !self.payload.is_empty() {
                    my_size += ::protobuf::rt::bytes_size(5, &self.payload);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.owner_dsnp_user_id != 0 {
                    os.write_uint64(1, self.owner_dsnp_user_id)?;
                }
                if self.schema_id != 0 {
                    os.write_uint32(2, self.schema_id)?;
                }
                if self.page_id != 0 {
                    os.write_uint32(3, self.page_id)?;
                }
                if self.prev_hash != 0 {
                    os.write_uint32(4, self.prev_hash)?;
                }
                if !self.payload.is_empty() {
                    os.write_bytes(5, &self.payload)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> PersistPageUpdate {
                PersistPageUpdate::new()
            }

            fn clear(&mut self) {
                self.owner_dsnp_user_id = 0;
                self.schema_id = 0;
                self.page_id = 0;
                self.prev_hash = 0;
                self.payload.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static PersistPageUpdate {
                static instance: PersistPageUpdate = PersistPageUpdate {
                    owner_dsnp_user_id: 0,
                    schema_id: 0,
                    page_id: 0,
                    prev_hash: 0,
                    payload: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for PersistPageUpdate {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Updates.Update.PersistPageUpdate").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for PersistPageUpdate {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for PersistPageUpdate {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:Updates.Update.DeletePageUpdate)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct DeletePageUpdate {
            // message fields
            // @@protoc_insertion_point(field:Updates.Update.DeletePageUpdate.owner_dsnp_user_id)
            pub owner_dsnp_user_id: u64,
            // @@protoc_insertion_point(field:Updates.Update.DeletePageUpdate.schema_id)
            pub schema_id: u32,
            // @@protoc_insertion_point(field:Updates.Update.DeletePageUpdate.page_id)
            pub page_id: u32,
            // @@protoc_insertion_point(field:Updates.Update.DeletePageUpdate.prev_hash)
            pub prev_hash: u32,
            // special fields
            // @@protoc_insertion_point(special_field:Updates.Update.DeletePageUpdate.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a DeletePageUpdate {
            fn default() -> &'a DeletePageUpdate {
                <DeletePageUpdate as ::protobuf::Message>::default_instance()
            }
        }

        impl DeletePageUpdate {
            pub fn new() -> DeletePageUpdate {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(4);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "owner_dsnp_user_id",
                    |m: &DeletePageUpdate| { &m.owner_dsnp_user_id },
                    |m: &mut DeletePageUpdate| { &mut m.owner_dsnp_user_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "schema_id",
                    |m: &DeletePageUpdate| { &m.schema_id },
                    |m: &mut DeletePageUpdate| { &mut m.schema_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "page_id",
                    |m: &DeletePageUpdate| { &m.page_id },
                    |m: &mut DeletePageUpdate| { &mut m.page_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "prev_hash",
                    |m: &DeletePageUpdate| { &m.prev_hash },
                    |m: &mut DeletePageUpdate| { &mut m.prev_hash },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeletePageUpdate>(
                    "Updates.Update.DeletePageUpdate",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for DeletePageUpdate {
            const NAME: &'static str = "DeletePageUpdate";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.owner_dsnp_user_id = is.read_uint64()?;
                        },
                        16 => {
                            self.schema_id = is.read_uint32()?;
                        },
                        24 => {
                            self.page_id = is.read_uint32()?;
                        },
                        32 => {
                            self.prev_hash = is.read_uint32()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.owner_dsnp_user_id != 0 {
                    my_size += ::protobuf::rt::uint64_size(1, self.owner_dsnp_user_id);
                }
                if self.schema_id != 0 {
                    my_size += ::protobuf::rt::uint32_size(2, self.schema_id);
                }
                if self.page_id != 0 {
                    my_size += ::protobuf::rt::uint32_size(3, self.page_id);
                }
                if self.prev_hash != 0 {
                    my_size += ::protobuf::rt::uint32_size(4, self.prev_hash);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.owner_dsnp_user_id != 0 {
                    os.write_uint64(1, self.owner_dsnp_user_id)?;
                }
                if self.schema_id != 0 {
                    os.write_uint32(2, self.schema_id)?;
                }
                if self.page_id != 0 {
                    os.write_uint32(3, self.page_id)?;
                }
                if self.prev_hash != 0 {
                    os.write_uint32(4, self.prev_hash)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> DeletePageUpdate {
                DeletePageUpdate::new()
            }

            fn clear(&mut self) {
                self.owner_dsnp_user_id = 0;
                self.schema_id = 0;
                self.page_id = 0;
                self.prev_hash = 0;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static DeletePageUpdate {
                static instance: DeletePageUpdate = DeletePageUpdate {
                    owner_dsnp_user_id: 0,
                    schema_id: 0,
                    page_id: 0,
                    prev_hash: 0,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for DeletePageUpdate {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Updates.Update.DeletePageUpdate").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for DeletePageUpdate {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for DeletePageUpdate {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:Updates.Update.AddKeyUpdate)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct AddKeyUpdate {
            // message fields
            // @@protoc_insertion_point(field:Updates.Update.AddKeyUpdate.owner_dsnp_user_id)
            pub owner_dsnp_user_id: u64,
            // @@protoc_insertion_point(field:Updates.Update.AddKeyUpdate.prev_hash)
            pub prev_hash: u32,
            // @@protoc_insertion_point(field:Updates.Update.AddKeyUpdate.payload)
            pub payload: ::std::vec::Vec<u8>,
            // special fields
            // @@protoc_insertion_point(special_field:Updates.Update.AddKeyUpdate.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a AddKeyUpdate {
            fn default() -> &'a AddKeyUpdate {
                <AddKeyUpdate as ::protobuf::Message>::default_instance()
            }
        }

        impl AddKeyUpdate {
            pub fn new() -> AddKeyUpdate {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "owner_dsnp_user_id",
                    |m: &AddKeyUpdate| { &m.owner_dsnp_user_id },
                    |m: &mut AddKeyUpdate| { &mut m.owner_dsnp_user_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "prev_hash",
                    |m: &AddKeyUpdate| { &m.prev_hash },
                    |m: &mut AddKeyUpdate| { &mut m.prev_hash },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "payload",
                    |m: &AddKeyUpdate| { &m.payload },
                    |m: &mut AddKeyUpdate| { &mut m.payload },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddKeyUpdate>(
                    "Updates.Update.AddKeyUpdate",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for AddKeyUpdate {
            const NAME: &'static str = "AddKeyUpdate";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.owner_dsnp_user_id = is.read_uint64()?;
                        },
                        16 => {
                            self.prev_hash = is.read_uint32()?;
                        },
                        26 => {
                            self.payload = is.read_bytes()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.owner_dsnp_user_id != 0 {
                    my_size += ::protobuf::rt::uint64_size(1, self.owner_dsnp_user_id);
                }
                if self.prev_hash != 0 {
                    my_size += ::protobuf::rt::uint32_size(2, self.prev_hash);
                }
                if !self.payload.is_empty() {
                    my_size += ::protobuf::rt::bytes_size(3, &self.payload);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.owner_dsnp_user_id != 0 {
                    os.write_uint64(1, self.owner_dsnp_user_id)?;
                }
                if self.prev_hash != 0 {
                    os.write_uint32(2, self.prev_hash)?;
                }
                if !self.payload.is_empty() {
                    os.write_bytes(3, &self.payload)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> AddKeyUpdate {
                AddKeyUpdate::new()
            }

            fn clear(&mut self) {
                self.owner_dsnp_user_id = 0;
                self.prev_hash = 0;
                self.payload.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static AddKeyUpdate {
                static instance: AddKeyUpdate = AddKeyUpdate {
                    owner_dsnp_user_id: 0,
                    prev_hash: 0,
                    payload: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for AddKeyUpdate {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Updates.Update.AddKeyUpdate").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for AddKeyUpdate {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for AddKeyUpdate {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

// @@protoc_insertion_point(message:DsnpGraphEdges)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DsnpGraphEdges {
    // message fields
    // @@protoc_insertion_point(field:DsnpGraphEdges.edge)
    pub edge: ::std::vec::Vec<dsnp_graph_edges::DsnpGraphEdge>,
    // special fields
    // @@protoc_insertion_point(special_field:DsnpGraphEdges.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DsnpGraphEdges {
    fn default() -> &'a DsnpGraphEdges {
        <DsnpGraphEdges as ::protobuf::Message>::default_instance()
    }
}

impl DsnpGraphEdges {
    pub fn new() -> DsnpGraphEdges {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "edge",
            |m: &DsnpGraphEdges| { &m.edge },
            |m: &mut DsnpGraphEdges| { &mut m.edge },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DsnpGraphEdges>(
            "DsnpGraphEdges",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DsnpGraphEdges {
    const NAME: &'static str = "DsnpGraphEdges";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.edge.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.edge {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.edge {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DsnpGraphEdges {
        DsnpGraphEdges::new()
    }

    fn clear(&mut self) {
        self.edge.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DsnpGraphEdges {
        static instance: DsnpGraphEdges = DsnpGraphEdges {
            edge: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DsnpGraphEdges {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DsnpGraphEdges").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DsnpGraphEdges {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DsnpGraphEdges {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DsnpGraphEdges`
pub mod dsnp_graph_edges {
    // @@protoc_insertion_point(message:DsnpGraphEdges.DsnpGraphEdge)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DsnpGraphEdge {
        // message fields
        // @@protoc_insertion_point(field:DsnpGraphEdges.DsnpGraphEdge.user_id)
        pub user_id: u64,
        // @@protoc_insertion_point(field:DsnpGraphEdges.DsnpGraphEdge.since)
        pub since: u64,
        // special fields
        // @@protoc_insertion_point(special_field:DsnpGraphEdges.DsnpGraphEdge.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DsnpGraphEdge {
        fn default() -> &'a DsnpGraphEdge {
            <DsnpGraphEdge as ::protobuf::Message>::default_instance()
        }
    }

    impl DsnpGraphEdge {
        pub fn new() -> DsnpGraphEdge {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "user_id",
                |m: &DsnpGraphEdge| { &m.user_id },
                |m: &mut DsnpGraphEdge| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "since",
                |m: &DsnpGraphEdge| { &m.since },
                |m: &mut DsnpGraphEdge| { &mut m.since },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DsnpGraphEdge>(
                "DsnpGraphEdges.DsnpGraphEdge",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DsnpGraphEdge {
        const NAME: &'static str = "DsnpGraphEdge";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.user_id = is.read_uint64()?;
                    },
                    16 => {
                        self.since = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.user_id != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.user_id);
            }
            if self.since != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.since);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.user_id != 0 {
                os.write_uint64(1, self.user_id)?;
            }
            if self.since != 0 {
                os.write_uint64(2, self.since)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DsnpGraphEdge {
            DsnpGraphEdge::new()
        }

        fn clear(&mut self) {
            self.user_id = 0;
            self.since = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DsnpGraphEdge {
            static instance: DsnpGraphEdge = DsnpGraphEdge {
                user_id: 0,
                since: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DsnpGraphEdge {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DsnpGraphEdges.DsnpGraphEdge").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DsnpGraphEdge {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DsnpGraphEdge {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:DsnpUsers)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DsnpUsers {
    // message fields
    // @@protoc_insertion_point(field:DsnpUsers.user)
    pub user: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:DsnpUsers.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DsnpUsers {
    fn default() -> &'a DsnpUsers {
        <DsnpUsers as ::protobuf::Message>::default_instance()
    }
}

impl DsnpUsers {
    pub fn new() -> DsnpUsers {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "user",
            |m: &DsnpUsers| { &m.user },
            |m: &mut DsnpUsers| { &mut m.user },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DsnpUsers>(
            "DsnpUsers",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DsnpUsers {
    const NAME: &'static str = "DsnpUsers";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.user)?;
                },
                8 => {
                    self.user.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint64_size(1, &self.user);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint64(1, &self.user)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DsnpUsers {
        DsnpUsers::new()
    }

    fn clear(&mut self) {
        self.user.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DsnpUsers {
        static instance: DsnpUsers = DsnpUsers {
            user: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DsnpUsers {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DsnpUsers").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DsnpUsers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DsnpUsers {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DsnpPublicKeys)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DsnpPublicKeys {
    // message fields
    // @@protoc_insertion_point(field:DsnpPublicKeys.public_key)
    pub public_key: ::std::vec::Vec<dsnp_public_keys::DsnpPublicKey>,
    // special fields
    // @@protoc_insertion_point(special_field:DsnpPublicKeys.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DsnpPublicKeys {
    fn default() -> &'a DsnpPublicKeys {
        <DsnpPublicKeys as ::protobuf::Message>::default_instance()
    }
}

impl DsnpPublicKeys {
    pub fn new() -> DsnpPublicKeys {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "public_key",
            |m: &DsnpPublicKeys| { &m.public_key },
            |m: &mut DsnpPublicKeys| { &mut m.public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DsnpPublicKeys>(
            "DsnpPublicKeys",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DsnpPublicKeys {
    const NAME: &'static str = "DsnpPublicKeys";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.public_key {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.public_key {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DsnpPublicKeys {
        DsnpPublicKeys::new()
    }

    fn clear(&mut self) {
        self.public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DsnpPublicKeys {
        static instance: DsnpPublicKeys = DsnpPublicKeys {
            public_key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DsnpPublicKeys {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DsnpPublicKeys").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DsnpPublicKeys {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DsnpPublicKeys {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DsnpPublicKeys`
pub mod dsnp_public_keys {
    // @@protoc_insertion_point(message:DsnpPublicKeys.DsnpPublicKey)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DsnpPublicKey {
        // message fields
        // @@protoc_insertion_point(field:DsnpPublicKeys.DsnpPublicKey.key)
        pub key: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:DsnpPublicKeys.DsnpPublicKey.key_id)
        pub key_id: u64,
        // special fields
        // @@protoc_insertion_point(special_field:DsnpPublicKeys.DsnpPublicKey.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DsnpPublicKey {
        fn default() -> &'a DsnpPublicKey {
            <DsnpPublicKey as ::protobuf::Message>::default_instance()
        }
    }

    impl DsnpPublicKey {
        pub fn new() -> DsnpPublicKey {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "key",
                |m: &DsnpPublicKey| { &m.key },
                |m: &mut DsnpPublicKey| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "key_id",
                |m: &DsnpPublicKey| { &m.key_id },
                |m: &mut DsnpPublicKey| { &mut m.key_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DsnpPublicKey>(
                "DsnpPublicKeys.DsnpPublicKey",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DsnpPublicKey {
        const NAME: &'static str = "DsnpPublicKey";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = is.read_bytes()?;
                    },
                    16 => {
                        self.key_id = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.key.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.key);
            }
            if self.key_id != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.key_id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.key.is_empty() {
                os.write_bytes(1, &self.key)?;
            }
            if self.key_id != 0 {
                os.write_uint64(2, self.key_id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DsnpPublicKey {
            DsnpPublicKey::new()
        }

        fn clear(&mut self) {
            self.key.clear();
            self.key_id = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DsnpPublicKey {
            static instance: DsnpPublicKey = DsnpPublicKey {
                key: ::std::vec::Vec::new(),
                key_id: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DsnpPublicKey {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DsnpPublicKeys.DsnpPublicKey").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DsnpPublicKey {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DsnpPublicKey {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:PrivacyType)
pub enum PrivacyType {
    // @@protoc_insertion_point(enum_value:PrivacyType.Public)
    Public = 0,
    // @@protoc_insertion_point(enum_value:PrivacyType.Private)
    Private = 1,
}

impl ::protobuf::Enum for PrivacyType {
    const NAME: &'static str = "PrivacyType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PrivacyType> {
        match value {
            0 => ::std::option::Option::Some(PrivacyType::Public),
            1 => ::std::option::Option::Some(PrivacyType::Private),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<PrivacyType> {
        match str {
            "Public" => ::std::option::Option::Some(PrivacyType::Public),
            "Private" => ::std::option::Option::Some(PrivacyType::Private),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PrivacyType] = &[
        PrivacyType::Public,
        PrivacyType::Private,
    ];
}

impl ::protobuf::EnumFull for PrivacyType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PrivacyType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PrivacyType {
    fn default() -> Self {
        PrivacyType::Public
    }
}

impl PrivacyType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PrivacyType>("PrivacyType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ConnectionType)
pub enum ConnectionType {
    // @@protoc_insertion_point(enum_value:ConnectionType.FollowPublic)
    FollowPublic = 0,
    // @@protoc_insertion_point(enum_value:ConnectionType.FollowPrivate)
    FollowPrivate = 1,
    // @@protoc_insertion_point(enum_value:ConnectionType.FriendshipPublic)
    FriendshipPublic = 2,
    // @@protoc_insertion_point(enum_value:ConnectionType.FriendshipPrivate)
    FriendshipPrivate = 3,
}

impl ::protobuf::Enum for ConnectionType {
    const NAME: &'static str = "ConnectionType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConnectionType> {
        match value {
            0 => ::std::option::Option::Some(ConnectionType::FollowPublic),
            1 => ::std::option::Option::Some(ConnectionType::FollowPrivate),
            2 => ::std::option::Option::Some(ConnectionType::FriendshipPublic),
            3 => ::std::option::Option::Some(ConnectionType::FriendshipPrivate),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ConnectionType> {
        match str {
            "FollowPublic" => ::std::option::Option::Some(ConnectionType::FollowPublic),
            "FollowPrivate" => ::std::option::Option::Some(ConnectionType::FollowPrivate),
            "FriendshipPublic" => ::std::option::Option::Some(ConnectionType::FriendshipPublic),
            "FriendshipPrivate" => ::std::option::Option::Some(ConnectionType::FriendshipPrivate),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ConnectionType] = &[
        ConnectionType::FollowPublic,
        ConnectionType::FollowPrivate,
        ConnectionType::FriendshipPublic,
        ConnectionType::FriendshipPrivate,
    ];
}

impl ::protobuf::EnumFull for ConnectionType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ConnectionType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ConnectionType {
    fn default() -> Self {
        ConnectionType::FollowPublic
    }
}

impl ConnectionType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ConnectionType>("ConnectionType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DsnpVersion)
pub enum DsnpVersion {
    // @@protoc_insertion_point(enum_value:DsnpVersion.Version1_0)
    Version1_0 = 0,
}

impl ::protobuf::Enum for DsnpVersion {
    const NAME: &'static str = "DsnpVersion";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DsnpVersion> {
        match value {
            0 => ::std::option::Option::Some(DsnpVersion::Version1_0),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DsnpVersion> {
        match str {
            "Version1_0" => ::std::option::Option::Some(DsnpVersion::Version1_0),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DsnpVersion] = &[
        DsnpVersion::Version1_0,
    ];
}

impl ::protobuf::EnumFull for DsnpVersion {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DsnpVersion").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DsnpVersion {
    fn default() -> Self {
        DsnpVersion::Version1_0
    }
}

impl DsnpVersion {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DsnpVersion>("DsnpVersion")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EnvironmentType)
pub enum EnvironmentType {
    // @@protoc_insertion_point(enum_value:EnvironmentType.MainNet)
    MainNet = 0,
    // @@protoc_insertion_point(enum_value:EnvironmentType.TestnetPaseo)
    TestnetPaseo = 1,
    // @@protoc_insertion_point(enum_value:EnvironmentType.Rococo)
    Rococo = 2,
    // @@protoc_insertion_point(enum_value:EnvironmentType.Dev)
    Dev = 3,
}

impl ::protobuf::Enum for EnvironmentType {
    const NAME: &'static str = "EnvironmentType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EnvironmentType> {
        match value {
            0 => ::std::option::Option::Some(EnvironmentType::MainNet),
            1 => ::std::option::Option::Some(EnvironmentType::TestnetPaseo),
            2 => ::std::option::Option::Some(EnvironmentType::Rococo),
            3 => ::std::option::Option::Some(EnvironmentType::Dev),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EnvironmentType> {
        match str {
            "MainNet" => ::std::option::Option::Some(EnvironmentType::MainNet),
            "TestnetPaseo" => ::std::option::Option::Some(EnvironmentType::TestnetPaseo),
            "Rococo" => ::std::option::Option::Some(EnvironmentType::Rococo),
            "Dev" => ::std::option::Option::Some(EnvironmentType::Dev),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EnvironmentType] = &[
        EnvironmentType::MainNet,
        EnvironmentType::TestnetPaseo,
        EnvironmentType::Rococo,
        EnvironmentType::Dev,
    ];
}

impl ::protobuf::EnumFull for EnvironmentType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EnvironmentType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EnvironmentType {
    fn default() -> Self {
        EnvironmentType::MainNet
    }
}

impl EnvironmentType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EnvironmentType>("EnvironmentType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!bridge/common/protos/output.proto\"y\n\x0cSchemaConfig\x12/\n\x0cdsnp\
    _version\x18\x01\x20\x01(\x0e2\x0c.DsnpVersionR\x0bdsnpVersion\x128\n\
    \x0fconnection_type\x18\x02\x20\x01(\x0e2\x0f.ConnectionTypeR\x0econnect\
    ionType\"\xcd\x03\n\x06Config\x12@\n\x1dsdk_max_stale_friendship_days\
    \x18\x01\x20\x01(\rR\x19sdkMaxStaleFriendshipDays\x128\n\x19max_graph_pa\
    ge_size_bytes\x18\x02\x20\x01(\rR\x15maxGraphPageSizeBytes\x12\x1e\n\x0b\
    max_page_id\x18\x03\x20\x01(\rR\tmaxPageId\x124\n\x17max_key_page_size_b\
    ytes\x18\x04\x20\x01(\rR\x13maxKeyPageSizeBytes\x125\n\nschema_map\x18\
    \x05\x20\x03(\x0b2\x16.Config.SchemaMapEntryR\tschemaMap\x121\n\rdsnp_ve\
    rsions\x18\x06\x20\x03(\x0e2\x0c.DsnpVersionR\x0cdsnpVersions\x12:\n\x1a\
    graph_public_key_schema_id\x18\x07\x20\x01(\rR\x16graphPublicKeySchemaId\
    \x1aK\n\x0eSchemaMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\
    \x12#\n\x05value\x18\x02\x20\x01(\x0b2\r.SchemaConfigR\x05value:\x028\
    \x01\"{\n\x0bEnvironment\x12;\n\x10environment_type\x18\x01\x20\x01(\x0e\
    2\x10.EnvironmentTypeR\x0fenvironmentType\x12$\n\x06config\x18\x02\x20\
    \x01(\x0b2\x07.ConfigH\0R\x06config\x88\x01\x01B\t\n\x07_config\"\xb3\
    \x05\n\x07Updates\x12'\n\x06update\x18\x01\x20\x03(\x0b2\x0f.Updates.Upd\
    ateR\x06update\x1a\xfe\x04\n\x06Update\x12=\n\x07persist\x18\x01\x20\x01\
    (\x0b2!.Updates.Update.PersistPageUpdateH\0R\x07persist\x12:\n\x06delete\
    \x18\x02\x20\x01(\x0b2\x20.Updates.Update.DeletePageUpdateH\0R\x06delete\
    \x127\n\x07add_key\x18\x03\x20\x01(\x0b2\x1c.Updates.Update.AddKeyUpdate\
    H\0R\x06addKey\x1a\xad\x01\n\x11PersistPageUpdate\x12+\n\x12owner_dsnp_u\
    ser_id\x18\x01\x20\x01(\x04R\x0fownerDsnpUserId\x12\x1b\n\tschema_id\x18\
    \x02\x20\x01(\rR\x08schemaId\x12\x17\n\x07page_id\x18\x03\x20\x01(\rR\
    \x06pageId\x12\x1b\n\tprev_hash\x18\x04\x20\x01(\rR\x08prevHash\x12\x18\
    \n\x07payload\x18\x05\x20\x01(\x0cR\x07payload\x1a\x92\x01\n\x10DeletePa\
    geUpdate\x12+\n\x12owner_dsnp_user_id\x18\x01\x20\x01(\x04R\x0fownerDsnp\
    UserId\x12\x1b\n\tschema_id\x18\x02\x20\x01(\rR\x08schemaId\x12\x17\n\
    \x07page_id\x18\x03\x20\x01(\rR\x06pageId\x12\x1b\n\tprev_hash\x18\x04\
    \x20\x01(\rR\x08prevHash\x1ar\n\x0cAddKeyUpdate\x12+\n\x12owner_dsnp_use\
    r_id\x18\x01\x20\x01(\x04R\x0fownerDsnpUserId\x12\x1b\n\tprev_hash\x18\
    \x02\x20\x01(\rR\x08prevHash\x12\x18\n\x07payload\x18\x03\x20\x01(\x0cR\
    \x07payloadB\x07\n\x05inner\"\x83\x01\n\x0eDsnpGraphEdges\x121\n\x04edge\
    \x18\x01\x20\x03(\x0b2\x1d.DsnpGraphEdges.DsnpGraphEdgeR\x04edge\x1a>\n\
    \rDsnpGraphEdge\x12\x17\n\x07user_id\x18\x01\x20\x01(\x04R\x06userId\x12\
    \x14\n\x05since\x18\x02\x20\x01(\x04R\x05since\"\x1f\n\tDsnpUsers\x12\
    \x12\n\x04user\x18\x01\x20\x03(\x04R\x04user\"\x88\x01\n\x0eDsnpPublicKe\
    ys\x12<\n\npublic_key\x18\x01\x20\x03(\x0b2\x1d.DsnpPublicKeys.DsnpPubli\
    cKeyR\tpublicKey\x1a8\n\rDsnpPublicKey\x12\x10\n\x03key\x18\x01\x20\x01(\
    \x0cR\x03key\x12\x15\n\x06key_id\x18\x02\x20\x01(\x04R\x05keyId*&\n\x0bP\
    rivacyType\x12\n\n\x06Public\x10\0\x12\x0b\n\x07Private\x10\x01*b\n\x0eC\
    onnectionType\x12\x10\n\x0cFollowPublic\x10\0\x12\x11\n\rFollowPrivate\
    \x10\x01\x12\x14\n\x10FriendshipPublic\x10\x02\x12\x15\n\x11FriendshipPr\
    ivate\x10\x03*\x1d\n\x0bDsnpVersion\x12\x0e\n\nVersion1_0\x10\0*E\n\x0fE\
    nvironmentType\x12\x0b\n\x07MainNet\x10\0\x12\x10\n\x0cTestnetPaseo\x10\
    \x01\x12\n\n\x06Rococo\x10\x02\x12\x07\n\x03Dev\x10\x03B\x1e\n\x1aio.amp\
    lica.graphsdk.modelsP\x01J\xf5\x18\n\x06\x12\x04\0\0c\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\03\n\t\n\x02\x08\x01\
    \x12\x03\x02\03\n\x08\n\x01\x08\x12\x03\x03\0\"\n\t\n\x02\x08\n\x12\x03\
    \x03\0\"\n\n\n\x02\x05\0\x12\x04\x05\0\x08\x01\n\n\n\x03\x05\0\x01\x12\
    \x03\x05\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x04\x0f\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\x06\x04\n\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    \x06\r\x0e\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\x04\x10\n\x0c\n\x05\x05\
    \0\x02\x01\x01\x12\x03\x07\x04\x0b\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x07\x0e\x0f\n\n\n\x02\x05\x01\x12\x04\n\0\x0f\x01\n\n\n\x03\x05\x01\x01\
    \x12\x03\n\x05\x13\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x0b\x02\x13\n\x0c\n\
    \x05\x05\x01\x02\0\x01\x12\x03\x0b\x02\x0e\n\x0c\n\x05\x05\x01\x02\0\x02\
    \x12\x03\x0b\x11\x12\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x0c\x02\x14\n\
    \x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x0c\x02\x0f\n\x0c\n\x05\x05\x01\
    \x02\x01\x02\x12\x03\x0c\x12\x13\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\r\
    \x02\x17\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\r\x02\x12\n\x0c\n\x05\
    \x05\x01\x02\x02\x02\x12\x03\r\x15\x16\n\x0b\n\x04\x05\x01\x02\x03\x12\
    \x03\x0e\x02\x18\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\x0e\x02\x13\n\
    \x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x0e\x16\x17\n\n\n\x02\x05\x02\x12\
    \x04\x11\0\x13\x01\n\n\n\x03\x05\x02\x01\x12\x03\x11\x05\x10\n\x0b\n\x04\
    \x05\x02\x02\0\x12\x03\x12\x04\x14\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03\
    \x12\x04\x0e\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03\x12\x11\x12\n\n\n\x02\
    \x04\0\x12\x04\x15\0\x18\x01\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\x14\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x16\x02\x1f\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03\x16\x02\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x16\x0e\x1a\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x16\x1d\x1e\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x17\x02%\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x17\x02\x10\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x17\x11\x20\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x17#$\n\n\n\x02\x04\x01\x12\x04\x1a\0\"\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1a\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1b\x02+\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x1b\t&\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1b)*\n\x0b\
    \n\x04\x04\x01\x02\x01\x12\x03\x1c\x02'\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1c\t\"\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1c%&\n\x0b\n\x04\x04\x01\x02\x02\
    \x12\x03\x1d\x02\x19\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1d\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x1d\t\x14\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x1d\x17\x18\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1e\
    \x02%\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03\x1e\t\x20\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03\x1e#$\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x1f\x02+\n\x0c\n\x05\
    \x04\x01\x02\x04\x06\x12\x03\x1f\x02\x1b\n\x0c\n\x05\x04\x01\x02\x04\x01\
    \x12\x03\x1f\x1c&\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1f)*\n\x0b\n\
    \x04\x04\x01\x02\x05\x12\x03\x20\x02)\n\x0c\n\x05\x04\x01\x02\x05\x04\
    \x12\x03\x20\x02\n\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03\x20\x0b\x16\n\
    \x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x20\x17$\n\x0c\n\x05\x04\x01\x02\
    \x05\x03\x12\x03\x20'(\n\x0b\n\x04\x04\x01\x02\x06\x12\x03!\x02(\n\x0c\n\
    \x05\x04\x01\x02\x06\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x01\x02\x06\
    \x01\x12\x03!\t#\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03!&'\n\n\n\x02\
    \x05\x03\x12\x04$\0)\x01\n\n\n\x03\x05\x03\x01\x12\x03$\x05\x14\n\x0b\n\
    \x04\x05\x03\x02\0\x12\x03%\x02\x0e\n\x0c\n\x05\x05\x03\x02\0\x01\x12\
    \x03%\x02\t\n\x0c\n\x05\x05\x03\x02\0\x02\x12\x03%\x0c\r\n\x0b\n\x04\x05\
    \x03\x02\x01\x12\x03&\x02\x13\n\x0c\n\x05\x05\x03\x02\x01\x01\x12\x03&\
    \x02\x0e\n\x0c\n\x05\x05\x03\x02\x01\x02\x12\x03&\x11\x12\n\x0b\n\x04\
    \x05\x03\x02\x02\x12\x03'\x02\r\n\x0c\n\x05\x05\x03\x02\x02\x01\x12\x03'\
    \x02\x08\n\x0c\n\x05\x05\x03\x02\x02\x02\x12\x03'\x0b\x0c\n\x0b\n\x04\
    \x05\x03\x02\x03\x12\x03(\x02\n\n\x0c\n\x05\x05\x03\x02\x03\x01\x12\x03(\
    \x02\x05\n\x0c\n\x05\x05\x03\x02\x03\x02\x12\x03(\x08\t\n\n\n\x02\x04\
    \x02\x12\x04+\0.\x01\n\n\n\x03\x04\x02\x01\x12\x03+\x08\x13\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03,\x02'\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03,\x02\
    \x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03,\x12\"\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03,%&\n\x0b\n\x04\x04\x02\x02\x01\x12\x03-\x02\x1d\n\x0c\
    \n\x05\x04\x02\x02\x01\x04\x12\x03-\x02\n\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03-\x0b\x11\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03-\x12\x18\n\
    \x0c\n\x05\x04\x02\x02\x01\x03\x12\x03-\x1b\x1c\n\n\n\x02\x04\x03\x12\
    \x040\0O\x01\n\n\n\x03\x04\x03\x01\x12\x030\x08\x0f\n\x0c\n\x04\x04\x03\
    \x03\0\x12\x041\x02L\x03\n\x0c\n\x05\x04\x03\x03\0\x01\x12\x031\n\x10\n\
    \x0e\n\x06\x04\x03\x03\0\x03\0\x12\x042\x048\x05\n\x0e\n\x07\x04\x03\x03\
    \0\x03\0\x01\x12\x032\x0c\x1d\n\x0f\n\x08\x04\x03\x03\0\x03\0\x02\0\x12\
    \x033\x06$\n\x10\n\t\x04\x03\x03\0\x03\0\x02\0\x05\x12\x033\x06\x0c\n\
    \x10\n\t\x04\x03\x03\0\x03\0\x02\0\x01\x12\x033\r\x1f\n\x10\n\t\x04\x03\
    \x03\0\x03\0\x02\0\x03\x12\x033\"#\n\x0f\n\x08\x04\x03\x03\0\x03\0\x02\
    \x01\x12\x034\x06\x1b\n\x10\n\t\x04\x03\x03\0\x03\0\x02\x01\x05\x12\x034\
    \x06\x0c\n\x10\n\t\x04\x03\x03\0\x03\0\x02\x01\x01\x12\x034\r\x16\n\x10\
    \n\t\x04\x03\x03\0\x03\0\x02\x01\x03\x12\x034\x19\x1a\n\x0f\n\x08\x04\
    \x03\x03\0\x03\0\x02\x02\x12\x035\x06\x19\n\x10\n\t\x04\x03\x03\0\x03\0\
    \x02\x02\x05\x12\x035\x06\x0c\n\x10\n\t\x04\x03\x03\0\x03\0\x02\x02\x01\
    \x12\x035\r\x14\n\x10\n\t\x04\x03\x03\0\x03\0\x02\x02\x03\x12\x035\x17\
    \x18\n\x0f\n\x08\x04\x03\x03\0\x03\0\x02\x03\x12\x036\x06\x1b\n\x10\n\t\
    \x04\x03\x03\0\x03\0\x02\x03\x05\x12\x036\x06\x0c\n\x10\n\t\x04\x03\x03\
    \0\x03\0\x02\x03\x01\x12\x036\r\x16\n\x10\n\t\x04\x03\x03\0\x03\0\x02\
    \x03\x03\x12\x036\x19\x1a\n\x0f\n\x08\x04\x03\x03\0\x03\0\x02\x04\x12\
    \x037\x06\x18\n\x10\n\t\x04\x03\x03\0\x03\0\x02\x04\x05\x12\x037\x06\x0b\
    \n\x10\n\t\x04\x03\x03\0\x03\0\x02\x04\x01\x12\x037\x0c\x13\n\x10\n\t\
    \x04\x03\x03\0\x03\0\x02\x04\x03\x12\x037\x16\x17\n\x0e\n\x06\x04\x03\
    \x03\0\x03\x01\x12\x04:\x04?\x05\n\x0e\n\x07\x04\x03\x03\0\x03\x01\x01\
    \x12\x03:\x0c\x1c\n\x0f\n\x08\x04\x03\x03\0\x03\x01\x02\0\x12\x03;\x06$\
    \n\x10\n\t\x04\x03\x03\0\x03\x01\x02\0\x05\x12\x03;\x06\x0c\n\x10\n\t\
    \x04\x03\x03\0\x03\x01\x02\0\x01\x12\x03;\r\x1f\n\x10\n\t\x04\x03\x03\0\
    \x03\x01\x02\0\x03\x12\x03;\"#\n\x0f\n\x08\x04\x03\x03\0\x03\x01\x02\x01\
    \x12\x03<\x06\x1b\n\x10\n\t\x04\x03\x03\0\x03\x01\x02\x01\x05\x12\x03<\
    \x06\x0c\n\x10\n\t\x04\x03\x03\0\x03\x01\x02\x01\x01\x12\x03<\r\x16\n\
    \x10\n\t\x04\x03\x03\0\x03\x01\x02\x01\x03\x12\x03<\x19\x1a\n\x0f\n\x08\
    \x04\x03\x03\0\x03\x01\x02\x02\x12\x03=\x06\x19\n\x10\n\t\x04\x03\x03\0\
    \x03\x01\x02\x02\x05\x12\x03=\x06\x0c\n\x10\n\t\x04\x03\x03\0\x03\x01\
    \x02\x02\x01\x12\x03=\r\x14\n\x10\n\t\x04\x03\x03\0\x03\x01\x02\x02\x03\
    \x12\x03=\x17\x18\n\x0f\n\x08\x04\x03\x03\0\x03\x01\x02\x03\x12\x03>\x06\
    \x1b\n\x10\n\t\x04\x03\x03\0\x03\x01\x02\x03\x05\x12\x03>\x06\x0c\n\x10\
    \n\t\x04\x03\x03\0\x03\x01\x02\x03\x01\x12\x03>\r\x16\n\x10\n\t\x04\x03\
    \x03\0\x03\x01\x02\x03\x03\x12\x03>\x19\x1a\n\x0e\n\x06\x04\x03\x03\0\
    \x03\x02\x12\x04A\x04E\x05\n\x0e\n\x07\x04\x03\x03\0\x03\x02\x01\x12\x03\
    A\x0c\x18\n\x0f\n\x08\x04\x03\x03\0\x03\x02\x02\0\x12\x03B\x06$\n\x10\n\
    \t\x04\x03\x03\0\x03\x02\x02\0\x05\x12\x03B\x06\x0c\n\x10\n\t\x04\x03\
    \x03\0\x03\x02\x02\0\x01\x12\x03B\r\x1f\n\x10\n\t\x04\x03\x03\0\x03\x02\
    \x02\0\x03\x12\x03B\"#\n\x0f\n\x08\x04\x03\x03\0\x03\x02\x02\x01\x12\x03\
    C\x06\x1b\n\x10\n\t\x04\x03\x03\0\x03\x02\x02\x01\x05\x12\x03C\x06\x0c\n\
    \x10\n\t\x04\x03\x03\0\x03\x02\x02\x01\x01\x12\x03C\r\x16\n\x10\n\t\x04\
    \x03\x03\0\x03\x02\x02\x01\x03\x12\x03C\x19\x1a\n\x0f\n\x08\x04\x03\x03\
    \0\x03\x02\x02\x02\x12\x03D\x06\x18\n\x10\n\t\x04\x03\x03\0\x03\x02\x02\
    \x02\x05\x12\x03D\x06\x0b\n\x10\n\t\x04\x03\x03\0\x03\x02\x02\x02\x01\
    \x12\x03D\x0c\x13\n\x10\n\t\x04\x03\x03\0\x03\x02\x02\x02\x03\x12\x03D\
    \x16\x17\n\x0e\n\x06\x04\x03\x03\0\x08\0\x12\x04G\x04K\x05\n\x0e\n\x07\
    \x04\x03\x03\0\x08\0\x01\x12\x03G\n\x0f\n\r\n\x06\x04\x03\x03\0\x02\0\
    \x12\x03H\x06$\n\x0e\n\x07\x04\x03\x03\0\x02\0\x06\x12\x03H\x06\x17\n\
    \x0e\n\x07\x04\x03\x03\0\x02\0\x01\x12\x03H\x18\x1f\n\x0e\n\x07\x04\x03\
    \x03\0\x02\0\x03\x12\x03H\"#\n\r\n\x06\x04\x03\x03\0\x02\x01\x12\x03I\
    \x06\"\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x06\x12\x03I\x06\x16\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x01\x01\x12\x03I\x17\x1d\n\x0e\n\x07\x04\x03\x03\
    \0\x02\x01\x03\x12\x03I\x20!\n\r\n\x06\x04\x03\x03\0\x02\x02\x12\x03J\
    \x06\x1f\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x06\x12\x03J\x06\x12\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x02\x01\x12\x03J\x13\x1a\n\x0e\n\x07\x04\x03\x03\
    \0\x02\x02\x03\x12\x03J\x1d\x1e\n\x0b\n\x04\x04\x03\x02\0\x12\x03N\x02\
    \x1d\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03N\x02\n\n\x0c\n\x05\x04\x03\
    \x02\0\x06\x12\x03N\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03N\x12\
    \x18\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03N\x1b\x1c\n\n\n\x02\x04\x04\
    \x12\x04Q\0W\x01\n\n\n\x03\x04\x04\x01\x12\x03Q\x08\x16\n\x0c\n\x04\x04\
    \x04\x03\0\x12\x04R\x02U\x03\n\x0c\n\x05\x04\x04\x03\0\x01\x12\x03R\n\
    \x17\n\r\n\x06\x04\x04\x03\0\x02\0\x12\x03S\x04\x17\n\x0e\n\x07\x04\x04\
    \x03\0\x02\0\x05\x12\x03S\x04\n\n\x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\
    \x03S\x0b\x12\n\x0e\n\x07\x04\x04\x03\0\x02\0\x03\x12\x03S\x15\x16\n\r\n\
    \x06\x04\x04\x03\0\x02\x01\x12\x03T\x04\x15\n\x0e\n\x07\x04\x04\x03\0\
    \x02\x01\x05\x12\x03T\x04\n\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x01\x12\
    \x03T\x0b\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x03\x12\x03T\x13\x14\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03V\x02\"\n\x0c\n\x05\x04\x04\x02\0\x04\
    \x12\x03V\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03V\x0b\x18\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03V\x19\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03V\x20!\n\n\n\x02\x04\x05\x12\x04Y\0[\x01\n\n\n\x03\x04\x05\x01\
    \x12\x03Y\x08\x11\n\x0b\n\x04\x04\x05\x02\0\x12\x03Z\x02\x1b\n\x0c\n\x05\
    \x04\x05\x02\0\x04\x12\x03Z\x02\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03Z\
    \x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03Z\x12\x16\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03Z\x19\x1a\n\n\n\x02\x04\x06\x12\x04]\0c\x01\n\n\n\
    \x03\x04\x06\x01\x12\x03]\x08\x16\n\x0c\n\x04\x04\x06\x03\0\x12\x04^\x02\
    a\x03\n\x0c\n\x05\x04\x06\x03\0\x01\x12\x03^\n\x17\n\r\n\x06\x04\x06\x03\
    \0\x02\0\x12\x03_\x04\x12\n\x0e\n\x07\x04\x06\x03\0\x02\0\x05\x12\x03_\
    \x04\t\n\x0e\n\x07\x04\x06\x03\0\x02\0\x01\x12\x03_\n\r\n\x0e\n\x07\x04\
    \x06\x03\0\x02\0\x03\x12\x03_\x10\x11\n\r\n\x06\x04\x06\x03\0\x02\x01\
    \x12\x03`\x04\x16\n\x0e\n\x07\x04\x06\x03\0\x02\x01\x05\x12\x03`\x04\n\n\
    \x0e\n\x07\x04\x06\x03\0\x02\x01\x01\x12\x03`\x0b\x11\n\x0e\n\x07\x04\
    \x06\x03\0\x02\x01\x03\x12\x03`\x14\x15\n\x0b\n\x04\x04\x06\x02\0\x12\
    \x03b\x02(\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03b\x02\n\n\x0c\n\x05\x04\
    \x06\x02\0\x06\x12\x03b\x0b\x18\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03b\
    \x19#\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03b&'b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(13);
            messages.push(SchemaConfig::generated_message_descriptor_data());
            messages.push(Config::generated_message_descriptor_data());
            messages.push(Environment::generated_message_descriptor_data());
            messages.push(Updates::generated_message_descriptor_data());
            messages.push(DsnpGraphEdges::generated_message_descriptor_data());
            messages.push(DsnpUsers::generated_message_descriptor_data());
            messages.push(DsnpPublicKeys::generated_message_descriptor_data());
            messages.push(updates::Update::generated_message_descriptor_data());
            messages.push(updates::update::PersistPageUpdate::generated_message_descriptor_data());
            messages.push(updates::update::DeletePageUpdate::generated_message_descriptor_data());
            messages.push(updates::update::AddKeyUpdate::generated_message_descriptor_data());
            messages.push(dsnp_graph_edges::DsnpGraphEdge::generated_message_descriptor_data());
            messages.push(dsnp_public_keys::DsnpPublicKey::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(PrivacyType::generated_enum_descriptor_data());
            enums.push(ConnectionType::generated_enum_descriptor_data());
            enums.push(DsnpVersion::generated_enum_descriptor_data());
            enums.push(EnvironmentType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
