/*
 Copyright (C) 2023 Frequency Team /
 */

#ifndef GRAPH_SDK_FFI_H_
#define GRAPH_SDK_FFI_H_

/* This file was automatically generated by cbindgen */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum {
  Version1_0,
} DsnpVersion;

typedef enum {
  Mainnet,
  Rococo,
  Dev,
} EnvironmentType;

/**
 * Privacy Type of the graph
 */
typedef enum {
  /**
   * publicly accessible graph
   */
  Public,
  /**
   * only accessible to owner of the graph and whoever the encryption keys have been shared with
   */
  Private,
} PrivacyType;

/**
 * Graph Edge defined in DSNP to store each connection
 */
typedef struct DsnpGraphEdge DsnpGraphEdge;

/**
 * Graph Key type
 */
typedef struct GraphKeyType GraphKeyType;

typedef struct GraphState GraphState;

typedef uint16_t SchemaId;

/**
 * Different connection type in social graph
 */
typedef enum {
  /**
   * Follow is a one-way connection type, which means it is only stored in follower side
   */
  Follow,
  /**
   * Friendship is two-way connection type, which means it is stored in both sides and each
   * side can revoke the connection for both sides
   */
  Friendship,
} ConnectionType_Tag;

typedef struct {
  ConnectionType_Tag tag;
  union {
    struct {
      PrivacyType follow;
    };
    struct {
      PrivacyType friendship;
    };
  };
} ConnectionType;

typedef struct {
  DsnpVersion dsnp_version;
  ConnectionType connection_type;
} SchemaConfig;

typedef struct {
  SchemaId schema_id;
  SchemaConfig schema_config;
} SchemaConfigTuple;

typedef struct {
  uint32_t sdk_max_users_graph_size;
  uint32_t sdk_max_stale_friendship_days;
  uint32_t max_graph_page_size_bytes;
  uint32_t max_page_id;
  uint32_t max_key_page_size_bytes;
  size_t schema_map_len;
  SchemaConfigTuple *schema_map;
  size_t dsnp_versions_len;
  DsnpVersion *dsnp_versions;
} Config;

typedef struct {
  EnvironmentType environment_type;
  Config config;
} Environment;

/**
 * DSNP User Id
 */
typedef uint64_t DsnpUserId;

/**
 * Key Pair wrapper
 */
typedef struct {
  /**
   * key pair type
   */
  GraphKeyType key_type;
  /**
   * public key raw
   */
  const uint8_t *public_key;
  /**
   * length of the public key
   */
  size_t public_key_len;
  /**
   * secret key raw
   */
  const uint8_t *secret_key;
  /**
   * length of the secret key
   */
  size_t secret_key_len;
} GraphKeyPair;

/**
 * Page Hash type
 */
typedef uint32_t PageHash;

/**
 * KeyData wrapper
 */
typedef struct {
  uint16_t index;
  uint8_t *content;
} KeyData;

typedef struct {
  DsnpUserId dsnp_user_id;
  PageHash keys_hash;
  KeyData *keys;
  size_t keys_len;
} DsnpKeys;

typedef struct {
  uint16_t page_id;
  uint8_t *content;
  size_t content_len;
  uint64_t content_hash;
} PageData;

typedef struct {
  /**
   * graph owner dsnp user id
   */
  DsnpUserId dsnp_user_id;
  /**
   * Schema id of imported data
   */
  SchemaId schema_id;
  /**
   * key pairs associated with this graph which is used for encryption and PRI generation
   */
  GraphKeyPair *key_pairs;
  size_t key_pairs_len;
  /**
   * published dsnp keys associated with this dsnp user
   */
  DsnpKeys *dsnp_keys;
  /**
   * Page data containing the social graph retrieved from chain
   */
  PageData *pages;
  size_t pages_len;
} ImportBundle;

/**
 * Graph page id
 */
typedef uint16_t PageId;

typedef struct {
  /**
   * owner of the social graph
   */
  DsnpUserId owner_dsnp_user_id;
  /**
   * Schema id of imported data
   */
  SchemaId schema_id;
  /**
   * page id associated with changed page
   */
  PageId page_id;
  /**
   * previous hash value is used to avoid updating a stale state
   */
  PageHash prev_hash;
  /**
   * social graph page data
   */
  uint8_t *payload;
  size_t payload_len;
} PersistPage;

typedef struct {
  /**
   * owner of the social graph
   */
  DsnpUserId owner_dsnp_user_id;
  /**
   * Schema id of removed data
   */
  SchemaId schema_id;
  /**
   * page id associated with changed page
   */
  PageId page_id;
  /**
   * previous hash value is used to avoid updating a stale state
   */
  PageHash prev_hash;
} DeletePage;

typedef struct {
  /**
   * owner of the social graph
   */
  DsnpUserId owner_dsnp_user_id;
  /**
   * previous hash value is used to avoid updating a stale state
   */
  PageHash prev_hash;
  /**
   * social graph page data
   */
  uint8_t *payload;
  size_t payload_len;
} AddKey;

typedef enum {
  Persist,
  Delete,
  Add,
} Update_Tag;

typedef struct {
  Update_Tag tag;
  union {
    struct {
      PersistPage persist;
    };
    struct {
      DeletePage delete_;
    };
    struct {
      AddKey add;
    };
  };
} Update;

/**
 * A connection representation in graph sdk
 */
typedef struct {
  /**
   * dsnp user id of the user that this connection is associated with
   */
  DsnpUserId dsnp_user_id;
  /**
   * Schema id of imported data
   */
  SchemaId schema_id;
} Connection;

/**
 * Different kind of actions that can be applied to the graph
 */
typedef enum {
  /**
   * an action that defines adding a connection in the social graph
   */
  Connect,
  /**
   * an action that defines removing an existing connection from social graph
   */
  Disconnect,
} Action_Tag;

typedef struct {
  /**
   * owner of the social graph
   */
  DsnpUserId owner_dsnp_user_id;
  /**
   * connection details
   */
  Connection connection;
} Connect_Body;

typedef struct {
  /**
   * owner of the social graph
   */
  DsnpUserId owner_dsnp_user_id;
  /**
   * connection details
   */
  Connection connection;
} Disconnect_Body;

typedef struct {
  Action_Tag tag;
  union {
    Connect_Body connect;
    Disconnect_Body disconnect;
  };
} Action;

void print_hello_graph(void);

bool graph_state_new(const Environment *environment);

bool graph_state_free(void);

#endif /* GRAPH_SDK_FFI_H_ */
