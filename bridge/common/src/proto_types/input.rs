// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `bridge/common/protos/input.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:KeyData)
pub struct KeyData {
    // message fields
    // @@protoc_insertion_point(field:KeyData.index)
    pub index: u32,
    // @@protoc_insertion_point(field:KeyData.content)
    pub content: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:KeyData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyData {
    fn default() -> &'a KeyData {
        <KeyData as ::protobuf::Message>::default_instance()
    }
}

impl KeyData {
    pub fn new() -> KeyData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &KeyData| { &m.index },
            |m: &mut KeyData| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content",
            |m: &KeyData| { &m.content },
            |m: &mut KeyData| { &mut m.content },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyData>(
            "KeyData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyData {
    const NAME: &'static str = "KeyData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_uint32()?;
                },
                18 => {
                    self.content = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.index);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if !self.content.is_empty() {
            os.write_bytes(2, &self.content)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyData {
        KeyData::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.content.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyData {
        static instance: KeyData = KeyData {
            index: 0,
            content: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PageData)
pub struct PageData {
    // message fields
    // @@protoc_insertion_point(field:PageData.page_id)
    pub page_id: u32,
    // @@protoc_insertion_point(field:PageData.content)
    pub content: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PageData.content_hash)
    pub content_hash: u32,
    // special fields
    // @@protoc_insertion_point(special_field:PageData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PageData {
    fn default() -> &'a PageData {
        <PageData as ::protobuf::Message>::default_instance()
    }
}

impl PageData {
    pub fn new() -> PageData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_id",
            |m: &PageData| { &m.page_id },
            |m: &mut PageData| { &mut m.page_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content",
            |m: &PageData| { &m.content },
            |m: &mut PageData| { &mut m.content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_hash",
            |m: &PageData| { &m.content_hash },
            |m: &mut PageData| { &mut m.content_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PageData>(
            "PageData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PageData {
    const NAME: &'static str = "PageData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.page_id = is.read_uint32()?;
                },
                18 => {
                    self.content = is.read_bytes()?;
                },
                24 => {
                    self.content_hash = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.page_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.page_id);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.content);
        }
        if self.content_hash != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.content_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.page_id != 0 {
            os.write_uint32(1, self.page_id)?;
        }
        if !self.content.is_empty() {
            os.write_bytes(2, &self.content)?;
        }
        if self.content_hash != 0 {
            os.write_uint32(3, self.content_hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PageData {
        PageData::new()
    }

    fn clear(&mut self) {
        self.page_id = 0;
        self.content.clear();
        self.content_hash = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PageData {
        static instance: PageData = PageData {
            page_id: 0,
            content: ::std::vec::Vec::new(),
            content_hash: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PageData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PageData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PageData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PageData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DsnpKeys)
pub struct DsnpKeys {
    // message fields
    // @@protoc_insertion_point(field:DsnpKeys.dsnp_user_id)
    pub dsnp_user_id: u64,
    // @@protoc_insertion_point(field:DsnpKeys.keys_hash)
    pub keys_hash: u32,
    // @@protoc_insertion_point(field:DsnpKeys.keys)
    pub keys: ::std::vec::Vec<KeyData>,
    // special fields
    // @@protoc_insertion_point(special_field:DsnpKeys.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DsnpKeys {
    fn default() -> &'a DsnpKeys {
        <DsnpKeys as ::protobuf::Message>::default_instance()
    }
}

impl DsnpKeys {
    pub fn new() -> DsnpKeys {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dsnp_user_id",
            |m: &DsnpKeys| { &m.dsnp_user_id },
            |m: &mut DsnpKeys| { &mut m.dsnp_user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "keys_hash",
            |m: &DsnpKeys| { &m.keys_hash },
            |m: &mut DsnpKeys| { &mut m.keys_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "keys",
            |m: &DsnpKeys| { &m.keys },
            |m: &mut DsnpKeys| { &mut m.keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DsnpKeys>(
            "DsnpKeys",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DsnpKeys {
    const NAME: &'static str = "DsnpKeys";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.dsnp_user_id = is.read_uint64()?;
                },
                16 => {
                    self.keys_hash = is.read_uint32()?;
                },
                26 => {
                    self.keys.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.dsnp_user_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.dsnp_user_id);
        }
        if self.keys_hash != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.keys_hash);
        }
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.dsnp_user_id != 0 {
            os.write_uint64(1, self.dsnp_user_id)?;
        }
        if self.keys_hash != 0 {
            os.write_uint32(2, self.keys_hash)?;
        }
        for v in &self.keys {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DsnpKeys {
        DsnpKeys::new()
    }

    fn clear(&mut self) {
        self.dsnp_user_id = 0;
        self.keys_hash = 0;
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DsnpKeys {
        static instance: DsnpKeys = DsnpKeys {
            dsnp_user_id: 0,
            keys_hash: 0,
            keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DsnpKeys {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DsnpKeys").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DsnpKeys {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DsnpKeys {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ImportBundles)
pub struct ImportBundles {
    // message fields
    // @@protoc_insertion_point(field:ImportBundles.bundles)
    pub bundles: ::std::vec::Vec<import_bundles::ImportBundle>,
    // special fields
    // @@protoc_insertion_point(special_field:ImportBundles.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ImportBundles {
    fn default() -> &'a ImportBundles {
        <ImportBundles as ::protobuf::Message>::default_instance()
    }
}

impl ImportBundles {
    pub fn new() -> ImportBundles {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "bundles",
            |m: &ImportBundles| { &m.bundles },
            |m: &mut ImportBundles| { &mut m.bundles },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImportBundles>(
            "ImportBundles",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ImportBundles {
    const NAME: &'static str = "ImportBundles";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bundles.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.bundles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.bundles {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ImportBundles {
        ImportBundles::new()
    }

    fn clear(&mut self) {
        self.bundles.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ImportBundles {
        static instance: ImportBundles = ImportBundles {
            bundles: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ImportBundles {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ImportBundles").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ImportBundles {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ImportBundles {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ImportBundles`
pub mod import_bundles {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:ImportBundles.ImportBundle)
    pub struct ImportBundle {
        // message fields
        // @@protoc_insertion_point(field:ImportBundles.ImportBundle.dsnp_user_id)
        pub dsnp_user_id: u64,
        // @@protoc_insertion_point(field:ImportBundles.ImportBundle.schema_id)
        pub schema_id: u32,
        // @@protoc_insertion_point(field:ImportBundles.ImportBundle.key_pairs)
        pub key_pairs: ::std::vec::Vec<import_bundle::GraphKeyPair>,
        // @@protoc_insertion_point(field:ImportBundles.ImportBundle.dsnp_keys)
        pub dsnp_keys: ::protobuf::MessageField<super::DsnpKeys>,
        // @@protoc_insertion_point(field:ImportBundles.ImportBundle.pages)
        pub pages: ::std::vec::Vec<super::PageData>,
        // special fields
        // @@protoc_insertion_point(special_field:ImportBundles.ImportBundle.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ImportBundle {
        fn default() -> &'a ImportBundle {
            <ImportBundle as ::protobuf::Message>::default_instance()
        }
    }

    impl ImportBundle {
        pub fn new() -> ImportBundle {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "dsnp_user_id",
                |m: &ImportBundle| { &m.dsnp_user_id },
                |m: &mut ImportBundle| { &mut m.dsnp_user_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "schema_id",
                |m: &ImportBundle| { &m.schema_id },
                |m: &mut ImportBundle| { &mut m.schema_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "key_pairs",
                |m: &ImportBundle| { &m.key_pairs },
                |m: &mut ImportBundle| { &mut m.key_pairs },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DsnpKeys>(
                "dsnp_keys",
                |m: &ImportBundle| { &m.dsnp_keys },
                |m: &mut ImportBundle| { &mut m.dsnp_keys },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "pages",
                |m: &ImportBundle| { &m.pages },
                |m: &mut ImportBundle| { &mut m.pages },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImportBundle>(
                "ImportBundles.ImportBundle",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ImportBundle {
        const NAME: &'static str = "ImportBundle";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.dsnp_user_id = is.read_uint64()?;
                    },
                    16 => {
                        self.schema_id = is.read_uint32()?;
                    },
                    26 => {
                        self.key_pairs.push(is.read_message()?);
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.dsnp_keys)?;
                    },
                    42 => {
                        self.pages.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.dsnp_user_id != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.dsnp_user_id);
            }
            if self.schema_id != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.schema_id);
            }
            for value in &self.key_pairs {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.dsnp_keys.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            for value in &self.pages {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.dsnp_user_id != 0 {
                os.write_uint64(1, self.dsnp_user_id)?;
            }
            if self.schema_id != 0 {
                os.write_uint32(2, self.schema_id)?;
            }
            for v in &self.key_pairs {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            if let Some(v) = self.dsnp_keys.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            for v in &self.pages {
                ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ImportBundle {
            ImportBundle::new()
        }

        fn clear(&mut self) {
            self.dsnp_user_id = 0;
            self.schema_id = 0;
            self.key_pairs.clear();
            self.dsnp_keys.clear();
            self.pages.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ImportBundle {
            static instance: ImportBundle = ImportBundle {
                dsnp_user_id: 0,
                schema_id: 0,
                key_pairs: ::std::vec::Vec::new(),
                dsnp_keys: ::protobuf::MessageField::none(),
                pages: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ImportBundle {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ImportBundles.ImportBundle").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ImportBundle {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ImportBundle {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `ImportBundle`
    pub mod import_bundle {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:ImportBundles.ImportBundle.GraphKeyPair)
        pub struct GraphKeyPair {
            // message fields
            // @@protoc_insertion_point(field:ImportBundles.ImportBundle.GraphKeyPair.key_type)
            pub key_type: ::protobuf::EnumOrUnknown<super::super::GraphKeyType>,
            // @@protoc_insertion_point(field:ImportBundles.ImportBundle.GraphKeyPair.public_key)
            pub public_key: ::std::vec::Vec<u8>,
            // @@protoc_insertion_point(field:ImportBundles.ImportBundle.GraphKeyPair.secret_key)
            pub secret_key: ::std::vec::Vec<u8>,
            // special fields
            // @@protoc_insertion_point(special_field:ImportBundles.ImportBundle.GraphKeyPair.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a GraphKeyPair {
            fn default() -> &'a GraphKeyPair {
                <GraphKeyPair as ::protobuf::Message>::default_instance()
            }
        }

        impl GraphKeyPair {
            pub fn new() -> GraphKeyPair {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "key_type",
                    |m: &GraphKeyPair| { &m.key_type },
                    |m: &mut GraphKeyPair| { &mut m.key_type },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "public_key",
                    |m: &GraphKeyPair| { &m.public_key },
                    |m: &mut GraphKeyPair| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "secret_key",
                    |m: &GraphKeyPair| { &m.secret_key },
                    |m: &mut GraphKeyPair| { &mut m.secret_key },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GraphKeyPair>(
                    "ImportBundles.ImportBundle.GraphKeyPair",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for GraphKeyPair {
            const NAME: &'static str = "GraphKeyPair";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.key_type = is.read_enum_or_unknown()?;
                        },
                        18 => {
                            self.public_key = is.read_bytes()?;
                        },
                        26 => {
                            self.secret_key = is.read_bytes()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.key_type != ::protobuf::EnumOrUnknown::new(super::super::GraphKeyType::X25519) {
                    my_size += ::protobuf::rt::int32_size(1, self.key_type.value());
                }
                if !self.public_key.is_empty() {
                    my_size += ::protobuf::rt::bytes_size(2, &self.public_key);
                }
                if !self.secret_key.is_empty() {
                    my_size += ::protobuf::rt::bytes_size(3, &self.secret_key);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.key_type != ::protobuf::EnumOrUnknown::new(super::super::GraphKeyType::X25519) {
                    os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.key_type))?;
                }
                if !self.public_key.is_empty() {
                    os.write_bytes(2, &self.public_key)?;
                }
                if !self.secret_key.is_empty() {
                    os.write_bytes(3, &self.secret_key)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> GraphKeyPair {
                GraphKeyPair::new()
            }

            fn clear(&mut self) {
                self.key_type = ::protobuf::EnumOrUnknown::new(super::super::GraphKeyType::X25519);
                self.public_key.clear();
                self.secret_key.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static GraphKeyPair {
                static instance: GraphKeyPair = GraphKeyPair {
                    key_type: ::protobuf::EnumOrUnknown::from_i32(0),
                    public_key: ::std::vec::Vec::new(),
                    secret_key: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for GraphKeyPair {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ImportBundles.ImportBundle.GraphKeyPair").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for GraphKeyPair {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for GraphKeyPair {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

///  Action related types
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Connection)
pub struct Connection {
    // message fields
    // @@protoc_insertion_point(field:Connection.dsnp_user_id)
    pub dsnp_user_id: u64,
    // @@protoc_insertion_point(field:Connection.schema_id)
    pub schema_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Connection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Connection {
    fn default() -> &'a Connection {
        <Connection as ::protobuf::Message>::default_instance()
    }
}

impl Connection {
    pub fn new() -> Connection {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dsnp_user_id",
            |m: &Connection| { &m.dsnp_user_id },
            |m: &mut Connection| { &mut m.dsnp_user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schema_id",
            |m: &Connection| { &m.schema_id },
            |m: &mut Connection| { &mut m.schema_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Connection>(
            "Connection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Connection {
    const NAME: &'static str = "Connection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.dsnp_user_id = is.read_uint64()?;
                },
                16 => {
                    self.schema_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.dsnp_user_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.dsnp_user_id);
        }
        if self.schema_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.schema_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.dsnp_user_id != 0 {
            os.write_uint64(1, self.dsnp_user_id)?;
        }
        if self.schema_id != 0 {
            os.write_uint32(2, self.schema_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Connection {
        Connection::new()
    }

    fn clear(&mut self) {
        self.dsnp_user_id = 0;
        self.schema_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Connection {
        static instance: Connection = Connection {
            dsnp_user_id: 0,
            schema_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Connection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Connection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Connection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Connection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Actions)
pub struct Actions {
    // message fields
    // @@protoc_insertion_point(field:Actions.actions)
    pub actions: ::std::vec::Vec<actions::Action>,
    // special fields
    // @@protoc_insertion_point(special_field:Actions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Actions {
    fn default() -> &'a Actions {
        <Actions as ::protobuf::Message>::default_instance()
    }
}

impl Actions {
    pub fn new() -> Actions {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "actions",
            |m: &Actions| { &m.actions },
            |m: &mut Actions| { &mut m.actions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Actions>(
            "Actions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Actions {
    const NAME: &'static str = "Actions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.actions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.actions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.actions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Actions {
        Actions::new()
    }

    fn clear(&mut self) {
        self.actions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Actions {
        static instance: Actions = Actions {
            actions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Actions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Actions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Actions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Actions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Actions`
pub mod actions {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:Actions.Action)
    pub struct Action {
        // message oneof groups
        pub inner: ::std::option::Option<action::Inner>,
        // special fields
        // @@protoc_insertion_point(special_field:Actions.Action.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Action {
        fn default() -> &'a Action {
            <Action as ::protobuf::Message>::default_instance()
        }
    }

    impl Action {
        pub fn new() -> Action {
            ::std::default::Default::default()
        }

        // .Actions.Action.ConnectAction connect_action = 1;

        pub fn connect_action(&self) -> &action::ConnectAction {
            match self.inner {
                ::std::option::Option::Some(action::Inner::ConnectAction(ref v)) => v,
                _ => <action::ConnectAction as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_connect_action(&mut self) {
            self.inner = ::std::option::Option::None;
        }

        pub fn has_connect_action(&self) -> bool {
            match self.inner {
                ::std::option::Option::Some(action::Inner::ConnectAction(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_connect_action(&mut self, v: action::ConnectAction) {
            self.inner = ::std::option::Option::Some(action::Inner::ConnectAction(v))
        }

        // Mutable pointer to the field.
        pub fn mut_connect_action(&mut self) -> &mut action::ConnectAction {
            if let ::std::option::Option::Some(action::Inner::ConnectAction(_)) = self.inner {
            } else {
                self.inner = ::std::option::Option::Some(action::Inner::ConnectAction(action::ConnectAction::new()));
            }
            match self.inner {
                ::std::option::Option::Some(action::Inner::ConnectAction(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_connect_action(&mut self) -> action::ConnectAction {
            if self.has_connect_action() {
                match self.inner.take() {
                    ::std::option::Option::Some(action::Inner::ConnectAction(v)) => v,
                    _ => panic!(),
                }
            } else {
                action::ConnectAction::new()
            }
        }

        // .Actions.Action.DisconnectAction disconnect_action = 2;

        pub fn disconnect_action(&self) -> &action::DisconnectAction {
            match self.inner {
                ::std::option::Option::Some(action::Inner::DisconnectAction(ref v)) => v,
                _ => <action::DisconnectAction as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_disconnect_action(&mut self) {
            self.inner = ::std::option::Option::None;
        }

        pub fn has_disconnect_action(&self) -> bool {
            match self.inner {
                ::std::option::Option::Some(action::Inner::DisconnectAction(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_disconnect_action(&mut self, v: action::DisconnectAction) {
            self.inner = ::std::option::Option::Some(action::Inner::DisconnectAction(v))
        }

        // Mutable pointer to the field.
        pub fn mut_disconnect_action(&mut self) -> &mut action::DisconnectAction {
            if let ::std::option::Option::Some(action::Inner::DisconnectAction(_)) = self.inner {
            } else {
                self.inner = ::std::option::Option::Some(action::Inner::DisconnectAction(action::DisconnectAction::new()));
            }
            match self.inner {
                ::std::option::Option::Some(action::Inner::DisconnectAction(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_disconnect_action(&mut self) -> action::DisconnectAction {
            if self.has_disconnect_action() {
                match self.inner.take() {
                    ::std::option::Option::Some(action::Inner::DisconnectAction(v)) => v,
                    _ => panic!(),
                }
            } else {
                action::DisconnectAction::new()
            }
        }

        // .Actions.Action.AddGraphKey add_key_action = 3;

        pub fn add_key_action(&self) -> &action::AddGraphKey {
            match self.inner {
                ::std::option::Option::Some(action::Inner::AddKeyAction(ref v)) => v,
                _ => <action::AddGraphKey as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_add_key_action(&mut self) {
            self.inner = ::std::option::Option::None;
        }

        pub fn has_add_key_action(&self) -> bool {
            match self.inner {
                ::std::option::Option::Some(action::Inner::AddKeyAction(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_add_key_action(&mut self, v: action::AddGraphKey) {
            self.inner = ::std::option::Option::Some(action::Inner::AddKeyAction(v))
        }

        // Mutable pointer to the field.
        pub fn mut_add_key_action(&mut self) -> &mut action::AddGraphKey {
            if let ::std::option::Option::Some(action::Inner::AddKeyAction(_)) = self.inner {
            } else {
                self.inner = ::std::option::Option::Some(action::Inner::AddKeyAction(action::AddGraphKey::new()));
            }
            match self.inner {
                ::std::option::Option::Some(action::Inner::AddKeyAction(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_add_key_action(&mut self) -> action::AddGraphKey {
            if self.has_add_key_action() {
                match self.inner.take() {
                    ::std::option::Option::Some(action::Inner::AddKeyAction(v)) => v,
                    _ => panic!(),
                }
            } else {
                action::AddGraphKey::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, action::ConnectAction>(
                "connect_action",
                Action::has_connect_action,
                Action::connect_action,
                Action::mut_connect_action,
                Action::set_connect_action,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, action::DisconnectAction>(
                "disconnect_action",
                Action::has_disconnect_action,
                Action::disconnect_action,
                Action::mut_disconnect_action,
                Action::set_disconnect_action,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, action::AddGraphKey>(
                "add_key_action",
                Action::has_add_key_action,
                Action::add_key_action,
                Action::mut_add_key_action,
                Action::set_add_key_action,
            ));
            oneofs.push(action::Inner::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Action>(
                "Actions.Action",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Action {
        const NAME: &'static str = "Action";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.inner = ::std::option::Option::Some(action::Inner::ConnectAction(is.read_message()?));
                    },
                    18 => {
                        self.inner = ::std::option::Option::Some(action::Inner::DisconnectAction(is.read_message()?));
                    },
                    26 => {
                        self.inner = ::std::option::Option::Some(action::Inner::AddKeyAction(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.inner {
                match v {
                    &action::Inner::ConnectAction(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &action::Inner::DisconnectAction(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &action::Inner::AddKeyAction(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.inner {
                match v {
                    &action::Inner::ConnectAction(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &action::Inner::DisconnectAction(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &action::Inner::AddKeyAction(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Action {
            Action::new()
        }

        fn clear(&mut self) {
            self.inner = ::std::option::Option::None;
            self.inner = ::std::option::Option::None;
            self.inner = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Action {
            static instance: Action = Action {
                inner: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Action {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Actions.Action").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Action {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Action {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Action`
    pub mod action {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:Actions.Action.inner)
        pub enum Inner {
            // @@protoc_insertion_point(oneof_field:Actions.Action.connect_action)
            ConnectAction(ConnectAction),
            // @@protoc_insertion_point(oneof_field:Actions.Action.disconnect_action)
            DisconnectAction(DisconnectAction),
            // @@protoc_insertion_point(oneof_field:Actions.Action.add_key_action)
            AddKeyAction(AddGraphKey),
        }

        impl ::protobuf::Oneof for Inner {
        }

        impl ::protobuf::OneofFull for Inner {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Action as ::protobuf::MessageFull>::descriptor().oneof_by_name("inner").unwrap()).clone()
            }
        }

        impl Inner {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Inner>("inner")
            }
        }
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:Actions.Action.ConnectAction)
        pub struct ConnectAction {
            // message fields
            // @@protoc_insertion_point(field:Actions.Action.ConnectAction.owner_dsnp_user_id)
            pub owner_dsnp_user_id: u64,
            // @@protoc_insertion_point(field:Actions.Action.ConnectAction.connection)
            pub connection: ::protobuf::MessageField<super::super::Connection>,
            // @@protoc_insertion_point(field:Actions.Action.ConnectAction.dsnp_keys)
            pub dsnp_keys: ::protobuf::MessageField<super::super::DsnpKeys>,
            // special fields
            // @@protoc_insertion_point(special_field:Actions.Action.ConnectAction.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a ConnectAction {
            fn default() -> &'a ConnectAction {
                <ConnectAction as ::protobuf::Message>::default_instance()
            }
        }

        impl ConnectAction {
            pub fn new() -> ConnectAction {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "owner_dsnp_user_id",
                    |m: &ConnectAction| { &m.owner_dsnp_user_id },
                    |m: &mut ConnectAction| { &mut m.owner_dsnp_user_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Connection>(
                    "connection",
                    |m: &ConnectAction| { &m.connection },
                    |m: &mut ConnectAction| { &mut m.connection },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::DsnpKeys>(
                    "dsnp_keys",
                    |m: &ConnectAction| { &m.dsnp_keys },
                    |m: &mut ConnectAction| { &mut m.dsnp_keys },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectAction>(
                    "Actions.Action.ConnectAction",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for ConnectAction {
            const NAME: &'static str = "ConnectAction";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.owner_dsnp_user_id = is.read_uint64()?;
                        },
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.connection)?;
                        },
                        26 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.dsnp_keys)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.owner_dsnp_user_id != 0 {
                    my_size += ::protobuf::rt::uint64_size(1, self.owner_dsnp_user_id);
                }
                if let Some(v) = self.connection.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                if let Some(v) = self.dsnp_keys.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.owner_dsnp_user_id != 0 {
                    os.write_uint64(1, self.owner_dsnp_user_id)?;
                }
                if let Some(v) = self.connection.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                if let Some(v) = self.dsnp_keys.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> ConnectAction {
                ConnectAction::new()
            }

            fn clear(&mut self) {
                self.owner_dsnp_user_id = 0;
                self.connection.clear();
                self.dsnp_keys.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static ConnectAction {
                static instance: ConnectAction = ConnectAction {
                    owner_dsnp_user_id: 0,
                    connection: ::protobuf::MessageField::none(),
                    dsnp_keys: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for ConnectAction {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Actions.Action.ConnectAction").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for ConnectAction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for ConnectAction {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:Actions.Action.DisconnectAction)
        pub struct DisconnectAction {
            // message fields
            // @@protoc_insertion_point(field:Actions.Action.DisconnectAction.owner_dsnp_user_id)
            pub owner_dsnp_user_id: u64,
            // @@protoc_insertion_point(field:Actions.Action.DisconnectAction.connection)
            pub connection: ::protobuf::MessageField<super::super::Connection>,
            // special fields
            // @@protoc_insertion_point(special_field:Actions.Action.DisconnectAction.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a DisconnectAction {
            fn default() -> &'a DisconnectAction {
                <DisconnectAction as ::protobuf::Message>::default_instance()
            }
        }

        impl DisconnectAction {
            pub fn new() -> DisconnectAction {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "owner_dsnp_user_id",
                    |m: &DisconnectAction| { &m.owner_dsnp_user_id },
                    |m: &mut DisconnectAction| { &mut m.owner_dsnp_user_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Connection>(
                    "connection",
                    |m: &DisconnectAction| { &m.connection },
                    |m: &mut DisconnectAction| { &mut m.connection },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DisconnectAction>(
                    "Actions.Action.DisconnectAction",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for DisconnectAction {
            const NAME: &'static str = "DisconnectAction";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.owner_dsnp_user_id = is.read_uint64()?;
                        },
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.connection)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.owner_dsnp_user_id != 0 {
                    my_size += ::protobuf::rt::uint64_size(1, self.owner_dsnp_user_id);
                }
                if let Some(v) = self.connection.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.owner_dsnp_user_id != 0 {
                    os.write_uint64(1, self.owner_dsnp_user_id)?;
                }
                if let Some(v) = self.connection.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> DisconnectAction {
                DisconnectAction::new()
            }

            fn clear(&mut self) {
                self.owner_dsnp_user_id = 0;
                self.connection.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static DisconnectAction {
                static instance: DisconnectAction = DisconnectAction {
                    owner_dsnp_user_id: 0,
                    connection: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for DisconnectAction {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Actions.Action.DisconnectAction").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for DisconnectAction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for DisconnectAction {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:Actions.Action.AddGraphKey)
        pub struct AddGraphKey {
            // message fields
            // @@protoc_insertion_point(field:Actions.Action.AddGraphKey.owner_dsnp_user_id)
            pub owner_dsnp_user_id: u64,
            // @@protoc_insertion_point(field:Actions.Action.AddGraphKey.new_public_key)
            pub new_public_key: ::std::vec::Vec<u8>,
            // special fields
            // @@protoc_insertion_point(special_field:Actions.Action.AddGraphKey.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a AddGraphKey {
            fn default() -> &'a AddGraphKey {
                <AddGraphKey as ::protobuf::Message>::default_instance()
            }
        }

        impl AddGraphKey {
            pub fn new() -> AddGraphKey {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "owner_dsnp_user_id",
                    |m: &AddGraphKey| { &m.owner_dsnp_user_id },
                    |m: &mut AddGraphKey| { &mut m.owner_dsnp_user_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "new_public_key",
                    |m: &AddGraphKey| { &m.new_public_key },
                    |m: &mut AddGraphKey| { &mut m.new_public_key },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddGraphKey>(
                    "Actions.Action.AddGraphKey",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for AddGraphKey {
            const NAME: &'static str = "AddGraphKey";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.owner_dsnp_user_id = is.read_uint64()?;
                        },
                        18 => {
                            self.new_public_key = is.read_bytes()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.owner_dsnp_user_id != 0 {
                    my_size += ::protobuf::rt::uint64_size(1, self.owner_dsnp_user_id);
                }
                if !self.new_public_key.is_empty() {
                    my_size += ::protobuf::rt::bytes_size(2, &self.new_public_key);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.owner_dsnp_user_id != 0 {
                    os.write_uint64(1, self.owner_dsnp_user_id)?;
                }
                if !self.new_public_key.is_empty() {
                    os.write_bytes(2, &self.new_public_key)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> AddGraphKey {
                AddGraphKey::new()
            }

            fn clear(&mut self) {
                self.owner_dsnp_user_id = 0;
                self.new_public_key.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static AddGraphKey {
                static instance: AddGraphKey = AddGraphKey {
                    owner_dsnp_user_id: 0,
                    new_public_key: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for AddGraphKey {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Actions.Action.AddGraphKey").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for AddGraphKey {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for AddGraphKey {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:GraphKeyType)
pub enum GraphKeyType {
    // @@protoc_insertion_point(enum_value:GraphKeyType.X25519)
    X25519 = 0,
}

impl ::protobuf::Enum for GraphKeyType {
    const NAME: &'static str = "GraphKeyType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GraphKeyType> {
        match value {
            0 => ::std::option::Option::Some(GraphKeyType::X25519),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [GraphKeyType] = &[
        GraphKeyType::X25519,
    ];
}

impl ::protobuf::EnumFull for GraphKeyType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("GraphKeyType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for GraphKeyType {
    fn default() -> Self {
        GraphKeyType::X25519
    }
}

impl GraphKeyType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<GraphKeyType>("GraphKeyType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20bridge/common/protos/input.proto\"9\n\x07KeyData\x12\x14\n\x05inde\
    x\x18\x01\x20\x01(\rR\x05index\x12\x18\n\x07content\x18\x02\x20\x01(\x0c\
    R\x07content\"`\n\x08PageData\x12\x17\n\x07page_id\x18\x01\x20\x01(\rR\
    \x06pageId\x12\x18\n\x07content\x18\x02\x20\x01(\x0cR\x07content\x12!\n\
    \x0ccontent_hash\x18\x03\x20\x01(\rR\x0bcontentHash\"g\n\x08DsnpKeys\x12\
    \x20\n\x0cdsnp_user_id\x18\x01\x20\x01(\x04R\ndsnpUserId\x12\x1b\n\tkeys\
    _hash\x18\x02\x20\x01(\rR\x08keysHash\x12\x1c\n\x04keys\x18\x03\x20\x03(\
    \x0b2\x08.KeyDataR\x04keys\"\x9e\x03\n\rImportBundles\x125\n\x07bundles\
    \x18\x01\x20\x03(\x0b2\x1b.ImportBundles.ImportBundleR\x07bundles\x1a\
    \xd5\x02\n\x0cImportBundle\x12\x20\n\x0cdsnp_user_id\x18\x01\x20\x01(\
    \x04R\ndsnpUserId\x12\x1b\n\tschema_id\x18\x02\x20\x01(\rR\x08schemaId\
    \x12E\n\tkey_pairs\x18\x03\x20\x03(\x0b2(.ImportBundles.ImportBundle.Gra\
    phKeyPairR\x08keyPairs\x12&\n\tdsnp_keys\x18\x04\x20\x01(\x0b2\t.DsnpKey\
    sR\x08dsnpKeys\x12\x1f\n\x05pages\x18\x05\x20\x03(\x0b2\t.PageDataR\x05p\
    ages\x1av\n\x0cGraphKeyPair\x12(\n\x08key_type\x18\x01\x20\x01(\x0e2\r.G\
    raphKeyTypeR\x07keyType\x12\x1d\n\npublic_key\x18\x02\x20\x01(\x0cR\tpub\
    licKey\x12\x1d\n\nsecret_key\x18\x03\x20\x01(\x0cR\tsecretKey\"K\n\nConn\
    ection\x12\x20\n\x0cdsnp_user_id\x18\x01\x20\x01(\x04R\ndsnpUserId\x12\
    \x1b\n\tschema_id\x18\x02\x20\x01(\rR\x08schemaId\"\x9d\x05\n\x07Actions\
    \x12)\n\x07actions\x18\x01\x20\x03(\x0b2\x0f.Actions.ActionR\x07actions\
    \x1a\xe6\x04\n\x06Action\x12F\n\x0econnect_action\x18\x01\x20\x01(\x0b2\
    \x1d.Actions.Action.ConnectActionH\0R\rconnectAction\x12O\n\x11disconnec\
    t_action\x18\x02\x20\x01(\x0b2\x20.Actions.Action.DisconnectActionH\0R\
    \x10disconnectAction\x12C\n\x0eadd_key_action\x18\x03\x20\x01(\x0b2\x1b.\
    Actions.Action.AddGraphKeyH\0R\x0caddKeyAction\x1a\xa4\x01\n\rConnectAct\
    ion\x12+\n\x12owner_dsnp_user_id\x18\x01\x20\x01(\x04R\x0fownerDsnpUserI\
    d\x12+\n\nconnection\x18\x02\x20\x01(\x0b2\x0b.ConnectionR\nconnection\
    \x12+\n\tdsnp_keys\x18\x03\x20\x01(\x0b2\t.DsnpKeysH\0R\x08dsnpKeys\x88\
    \x01\x01B\x0c\n\n_dsnp_keys\x1al\n\x10DisconnectAction\x12+\n\x12owner_d\
    snp_user_id\x18\x01\x20\x01(\x04R\x0fownerDsnpUserId\x12+\n\nconnection\
    \x18\x02\x20\x01(\x0b2\x0b.ConnectionR\nconnection\x1a`\n\x0bAddGraphKey\
    \x12+\n\x12owner_dsnp_user_id\x18\x01\x20\x01(\x04R\x0fownerDsnpUserId\
    \x12$\n\x0enew_public_key\x18\x02\x20\x01(\x0cR\x0cnewPublicKeyB\x07\n\
    \x05inner*\x1a\n\x0cGraphKeyType\x12\n\n\x06X25519\x10\0B\x1e\n\x1aio.am\
    plica.graphsdk.modelsP\x01J\xab\x13\n\x06\x12\x04\0\0J\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\03\n\t\n\x02\x08\x01\
    \x12\x03\x02\03\n\x08\n\x01\x08\x12\x03\x03\0\"\n\t\n\x02\x08\n\x12\x03\
    \x03\0\"\n\n\n\x02\x05\0\x12\x04\x05\0\x07\x01\n\n\n\x03\x05\0\x01\x12\
    \x03\x05\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x02\r\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\x06\x02\x08\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    \x06\x0b\x0c\n\n\n\x02\x04\0\x12\x04\t\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\t\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02\x13\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\t\
    \x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x11\x12\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x0b\x02\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x08\x0f\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x0b\x12\x13\n\n\n\x02\x04\x01\x12\x04\x0e\0\x12\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x0f\x02\x15\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0f\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x0f\t\x10\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x0f\x13\x14\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x10\x02\x14\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x10\x08\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x10\x12\x13\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x11\x02\x1a\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x11\t\x15\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x11\x18\x19\n\
    \n\n\x02\x04\x02\x12\x04\x14\0\x18\x01\n\n\n\x03\x04\x02\x01\x12\x03\x14\
    \x08\x10\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x15\x02\x1a\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x15\t\x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x15\x18\x19\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x16\x02\x17\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x16\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x16\t\x12\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\x16\x15\x16\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x03\x17\x02\x1c\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x17\x02\
    \n\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x17\x0b\x12\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03\x17\x13\x17\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03\x17\x1a\x1b\n\n\n\x02\x04\x03\x12\x04\x1a\0)\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03\x1a\x08\x15\n\x0c\n\x04\x04\x03\x03\0\x12\x04\x1b\x02'\x03\
    \n\x0c\n\x05\x04\x03\x03\0\x01\x12\x03\x1b\n\x16\n\x0e\n\x06\x04\x03\x03\
    \0\x03\0\x12\x04\x1c\x04\x20\x05\n\x0e\n\x07\x04\x03\x03\0\x03\0\x01\x12\
    \x03\x1c\x0c\x18\n\x0f\n\x08\x04\x03\x03\0\x03\0\x02\0\x12\x03\x1d\x06\
    \x20\n\x10\n\t\x04\x03\x03\0\x03\0\x02\0\x06\x12\x03\x1d\x06\x12\n\x10\n\
    \t\x04\x03\x03\0\x03\0\x02\0\x01\x12\x03\x1d\x13\x1b\n\x10\n\t\x04\x03\
    \x03\0\x03\0\x02\0\x03\x12\x03\x1d\x1e\x1f\n\x0f\n\x08\x04\x03\x03\0\x03\
    \0\x02\x01\x12\x03\x1e\x06\x1b\n\x10\n\t\x04\x03\x03\0\x03\0\x02\x01\x05\
    \x12\x03\x1e\x06\x0b\n\x10\n\t\x04\x03\x03\0\x03\0\x02\x01\x01\x12\x03\
    \x1e\x0c\x16\n\x10\n\t\x04\x03\x03\0\x03\0\x02\x01\x03\x12\x03\x1e\x19\
    \x1a\n\x0f\n\x08\x04\x03\x03\0\x03\0\x02\x02\x12\x03\x1f\x06\x1b\n\x10\n\
    \t\x04\x03\x03\0\x03\0\x02\x02\x05\x12\x03\x1f\x06\x0b\n\x10\n\t\x04\x03\
    \x03\0\x03\0\x02\x02\x01\x12\x03\x1f\x0c\x16\n\x10\n\t\x04\x03\x03\0\x03\
    \0\x02\x02\x03\x12\x03\x1f\x19\x1a\n\r\n\x06\x04\x03\x03\0\x02\0\x12\x03\
    \"\x04\x1c\n\x0e\n\x07\x04\x03\x03\0\x02\0\x05\x12\x03\"\x04\n\n\x0e\n\
    \x07\x04\x03\x03\0\x02\0\x01\x12\x03\"\x0b\x17\n\x0e\n\x07\x04\x03\x03\0\
    \x02\0\x03\x12\x03\"\x1a\x1b\n\r\n\x06\x04\x03\x03\0\x02\x01\x12\x03#\
    \x04\x19\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x05\x12\x03#\x04\n\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x01\x01\x12\x03#\x0b\x14\n\x0e\n\x07\x04\x03\x03\
    \0\x02\x01\x03\x12\x03#\x17\x18\n\r\n\x06\x04\x03\x03\0\x02\x02\x12\x03$\
    \x04(\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x04\x12\x03$\x04\x0c\n\x0e\n\x07\
    \x04\x03\x03\0\x02\x02\x06\x12\x03$\r\x19\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x02\x01\x12\x03$\x1a#\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x03\x12\x03$&'\
    \n\r\n\x06\x04\x03\x03\0\x02\x03\x12\x03%\x04\x1b\n\x0e\n\x07\x04\x03\
    \x03\0\x02\x03\x06\x12\x03%\x04\x0c\n\x0e\n\x07\x04\x03\x03\0\x02\x03\
    \x01\x12\x03%\r\x16\n\x0e\n\x07\x04\x03\x03\0\x02\x03\x03\x12\x03%\x19\
    \x1a\n\r\n\x06\x04\x03\x03\0\x02\x04\x12\x03&\x04\x20\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x04\x04\x12\x03&\x04\x0c\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x04\x06\x12\x03&\r\x15\n\x0e\n\x07\x04\x03\x03\0\x02\x04\x01\x12\x03&\
    \x16\x1b\n\x0e\n\x07\x04\x03\x03\0\x02\x04\x03\x12\x03&\x1e\x1f\n\x0b\n\
    \x04\x04\x03\x02\0\x12\x03(\x02$\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03(\
    \x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03(\x0b\x17\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03(\x18\x1f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03(\"\
    #\n\"\n\x02\x04\x04\x12\x04,\0/\x01\x1a\x16\x20Action\x20related\x20type\
    s\n\n\n\n\x03\x04\x04\x01\x12\x03,\x08\x12\n\x0b\n\x04\x04\x04\x02\0\x12\
    \x03-\x02\x1a\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03-\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03-\t\x15\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03-\
    \x18\x19\n\x0b\n\x04\x04\x04\x02\x01\x12\x03.\x02\x17\n\x0c\n\x05\x04\
    \x04\x02\x01\x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\
    \x03.\t\x12\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03.\x15\x16\n\n\n\x02\
    \x04\x05\x12\x041\0J\x01\n\n\n\x03\x04\x05\x01\x12\x031\x08\x0f\n\x0c\n\
    \x04\x04\x05\x03\0\x12\x042\x02H\x03\n\x0c\n\x05\x04\x05\x03\0\x01\x12\
    \x032\n\x10\n\x0e\n\x06\x04\x05\x03\0\x03\0\x12\x043\x047\x05\n\x0e\n\
    \x07\x04\x05\x03\0\x03\0\x01\x12\x033\x0c\x19\n\x0f\n\x08\x04\x05\x03\0\
    \x03\0\x02\0\x12\x034\x06$\n\x10\n\t\x04\x05\x03\0\x03\0\x02\0\x05\x12\
    \x034\x06\x0c\n\x10\n\t\x04\x05\x03\0\x03\0\x02\0\x01\x12\x034\r\x1f\n\
    \x10\n\t\x04\x05\x03\0\x03\0\x02\0\x03\x12\x034\"#\n\x0f\n\x08\x04\x05\
    \x03\0\x03\0\x02\x01\x12\x035\x06\x20\n\x10\n\t\x04\x05\x03\0\x03\0\x02\
    \x01\x06\x12\x035\x06\x10\n\x10\n\t\x04\x05\x03\0\x03\0\x02\x01\x01\x12\
    \x035\x11\x1b\n\x10\n\t\x04\x05\x03\0\x03\0\x02\x01\x03\x12\x035\x1e\x1f\
    \n\x0f\n\x08\x04\x05\x03\0\x03\0\x02\x02\x12\x036\x06&\n\x10\n\t\x04\x05\
    \x03\0\x03\0\x02\x02\x04\x12\x036\x06\x0e\n\x10\n\t\x04\x05\x03\0\x03\0\
    \x02\x02\x06\x12\x036\x0f\x17\n\x10\n\t\x04\x05\x03\0\x03\0\x02\x02\x01\
    \x12\x036\x18!\n\x10\n\t\x04\x05\x03\0\x03\0\x02\x02\x03\x12\x036$%\n\
    \x0e\n\x06\x04\x05\x03\0\x03\x01\x12\x049\x04<\x05\n\x0e\n\x07\x04\x05\
    \x03\0\x03\x01\x01\x12\x039\x0c\x1c\n\x0f\n\x08\x04\x05\x03\0\x03\x01\
    \x02\0\x12\x03:\x06$\n\x10\n\t\x04\x05\x03\0\x03\x01\x02\0\x05\x12\x03:\
    \x06\x0c\n\x10\n\t\x04\x05\x03\0\x03\x01\x02\0\x01\x12\x03:\r\x1f\n\x10\
    \n\t\x04\x05\x03\0\x03\x01\x02\0\x03\x12\x03:\"#\n\x0f\n\x08\x04\x05\x03\
    \0\x03\x01\x02\x01\x12\x03;\x06\x20\n\x10\n\t\x04\x05\x03\0\x03\x01\x02\
    \x01\x06\x12\x03;\x06\x10\n\x10\n\t\x04\x05\x03\0\x03\x01\x02\x01\x01\
    \x12\x03;\x11\x1b\n\x10\n\t\x04\x05\x03\0\x03\x01\x02\x01\x03\x12\x03;\
    \x1e\x1f\n\x0e\n\x06\x04\x05\x03\0\x03\x02\x12\x04>\x04A\x05\n\x0e\n\x07\
    \x04\x05\x03\0\x03\x02\x01\x12\x03>\x0c\x17\n\x0f\n\x08\x04\x05\x03\0\
    \x03\x02\x02\0\x12\x03?\x06$\n\x10\n\t\x04\x05\x03\0\x03\x02\x02\0\x05\
    \x12\x03?\x06\x0c\n\x10\n\t\x04\x05\x03\0\x03\x02\x02\0\x01\x12\x03?\r\
    \x1f\n\x10\n\t\x04\x05\x03\0\x03\x02\x02\0\x03\x12\x03?\"#\n\x0f\n\x08\
    \x04\x05\x03\0\x03\x02\x02\x01\x12\x03@\x06\x1f\n\x10\n\t\x04\x05\x03\0\
    \x03\x02\x02\x01\x05\x12\x03@\x06\x0b\n\x10\n\t\x04\x05\x03\0\x03\x02\
    \x02\x01\x01\x12\x03@\x0c\x1a\n\x10\n\t\x04\x05\x03\0\x03\x02\x02\x01\
    \x03\x12\x03@\x1d\x1e\n\x0e\n\x06\x04\x05\x03\0\x08\0\x12\x04C\x04G\x05\
    \n\x0e\n\x07\x04\x05\x03\0\x08\0\x01\x12\x03C\n\x0f\n\r\n\x06\x04\x05\
    \x03\0\x02\0\x12\x03D\x06'\n\x0e\n\x07\x04\x05\x03\0\x02\0\x06\x12\x03D\
    \x06\x13\n\x0e\n\x07\x04\x05\x03\0\x02\0\x01\x12\x03D\x14\"\n\x0e\n\x07\
    \x04\x05\x03\0\x02\0\x03\x12\x03D%&\n\r\n\x06\x04\x05\x03\0\x02\x01\x12\
    \x03E\x06-\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x06\x12\x03E\x06\x16\n\x0e\
    \n\x07\x04\x05\x03\0\x02\x01\x01\x12\x03E\x17(\n\x0e\n\x07\x04\x05\x03\0\
    \x02\x01\x03\x12\x03E+,\n\r\n\x06\x04\x05\x03\0\x02\x02\x12\x03F\x06%\n\
    \x0e\n\x07\x04\x05\x03\0\x02\x02\x06\x12\x03F\x06\x11\n\x0e\n\x07\x04\
    \x05\x03\0\x02\x02\x01\x12\x03F\x12\x20\n\x0e\n\x07\x04\x05\x03\0\x02\
    \x02\x03\x12\x03F#$\n\x0b\n\x04\x04\x05\x02\0\x12\x03I\x02\x1e\n\x0c\n\
    \x05\x04\x05\x02\0\x04\x12\x03I\x02\n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\
    \x03I\x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03I\x12\x19\n\x0c\n\x05\
    \x04\x05\x02\0\x03\x12\x03I\x1c\x1db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(KeyData::generated_message_descriptor_data());
            messages.push(PageData::generated_message_descriptor_data());
            messages.push(DsnpKeys::generated_message_descriptor_data());
            messages.push(ImportBundles::generated_message_descriptor_data());
            messages.push(Connection::generated_message_descriptor_data());
            messages.push(Actions::generated_message_descriptor_data());
            messages.push(import_bundles::ImportBundle::generated_message_descriptor_data());
            messages.push(import_bundles::import_bundle::GraphKeyPair::generated_message_descriptor_data());
            messages.push(actions::Action::generated_message_descriptor_data());
            messages.push(actions::action::ConnectAction::generated_message_descriptor_data());
            messages.push(actions::action::DisconnectAction::generated_message_descriptor_data());
            messages.push(actions::action::AddGraphKey::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(GraphKeyType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
